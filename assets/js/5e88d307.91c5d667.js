"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[44948],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(r),d=o,f=p["".concat(c,".").concat(d)]||p[d]||m[d]||a;return r?n.createElement(f,i(i({ref:t},s),{},{components:r})):n.createElement(f,i({ref:t},s))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},22626:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var n=r(87462),o=(r(67294),r(3905));const a={},i=void 0,l={unversionedId:"slip-box/reference-notes/Introduction to Apache Airflow",id:"slip-box/reference-notes/Introduction to Apache Airflow",title:"Introduction to Apache Airflow",description:"Metadata:*",source:"@site/docs/slip-box/reference-notes/Introduction to Apache Airflow.md",sourceDirName:"slip-box/reference-notes",slug:"/slip-box/reference-notes/Introduction to Apache Airflow",permalink:"/docs/slip-box/reference-notes/Introduction to Apache Airflow",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/slip-box/reference-notes/Introduction to Apache Airflow.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Intro to OOP",permalink:"/docs/slip-box/reference-notes/Intro to OOP"},next:{title:"Introduction to Big Data",permalink:"/docs/slip-box/reference-notes/Introduction to Big Data"}},c={},u=[],s={toc:u};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Metadata:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"#article #data-science "),(0,o.kt)("li",{parentName:"ul"},"Source: ",(0,o.kt)("a",{parentName:"li",href:"https://khashtamov.com/en/introduction-to-apache-airflow/"},"Introduction to Apache Airflow"))))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Created in 2014 by Maxime Beauchemin at Airbnb"),(0,o.kt)("li",{parentName:"ul"},"A swiss-army knife to build data pipelines using ",(0,o.kt)("strong",{parentName:"li"},"directed acyclic graph (DAG)"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Describes the dependencies in your job"))),(0,o.kt)("li",{parentName:"ul"},"Each node in the DAG is an ",(0,o.kt)("strong",{parentName:"li"},"operator"),", and Airflow has various operators for each type of job",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Operator ",(0,o.kt)("strong",{parentName:"li"},"can't get a return value from previous operator/job")," because they can be executed in a distributed fashion"),(0,o.kt)("li",{parentName:"ul"},"An operator that react to an event is a ",(0,o.kt)("strong",{parentName:"li"},"sensor"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"For example, a ",(0,o.kt)("inlineCode",{parentName:"li"},"S3Senor")," can check if an object exists in a S3 bucket and perform something "))),(0,o.kt)("li",{parentName:"ul"},"Hooks are used to interact with external services and used to build Operators"))),(0,o.kt)("li",{parentName:"ul"},"Executor is responsible for how tasks are going to be executed",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"SequentialExecutor - default executor but doesn't support parallel so not ideal for production"),(0,o.kt)("li",{parentName:"ul"},"LocalExecutor - use separate executor for parallel execution but can't scale horizontally and is not fault tolerant"),(0,o.kt)("li",{parentName:"ul"},"CeleryExecutor - most popular executor for production, uses Celery task queue but requires broker (Redis, RabbitMQ, etc)"),(0,o.kt)("li",{parentName:"ul"},"DaskExecutor - Similar to Celery but uses Dask"),(0,o.kt)("li",{parentName:"ul"},"KubernetesExecutor - uses Kubernestes cluster for task execution"))),(0,o.kt)("li",{parentName:"ul"},"Using ",(0,o.kt)("inlineCode",{parentName:"li"},"Operator1 >> Operator2")," to build the DAG logic")))}p.isMDXComponent=!0}}]);