"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[45637],{28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var s=r(96540);const t={},i=s.createContext(t);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},78459:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"slip-box/reference-notes/Scikit-Learn","title":"Scikit-Learn","description":"- Library that implements many ready to use Machine Learning algorithms","source":"@site/docs/slip-box/reference-notes/Scikit-Learn.md","sourceDirName":"slip-box/reference-notes","slug":"/slip-box/reference-notes/Scikit-Learn","permalink":"/docs/slip-box/reference-notes/Scikit-Learn","draft":false,"unlisted":false,"editUrl":"https://github.com/paulliwali/paulliwali.github.io/tree/main/docs/docs/slip-box/reference-notes/Scikit-Learn.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\udcf0 Summary (use your own words)","permalink":"/docs/slip-box/reference-notes/Science is a strong-link problem"},"next":{"title":"Slow Living","permalink":"/docs/slip-box/reference-notes/Slow Living"}}');var t=r(74848),i=r(28453);const o={},a="Small transfomer that creaters the combined features",l={},d=[];function c(e){const n={code:"code",h1:"h1",header:"header",li:"li",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Library that implements many ready to use Machine Learning algorithms"}),"\n",(0,t.jsxs)(n.li,{children:["Core API design principles","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Consistency - all objects share the same simple interface","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Estimators","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Can estimate some parameters based on a dataset"}),"\n",(0,t.jsxs)(n.li,{children:["Done using ",(0,t.jsx)(n.code,{children:"fit()"})," method"]}),"\n",(0,t.jsx)(n.li,{children:"Takes the dataset as a parameter (2 for supervised) and maybe another parameter as the hyperparameter"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Transformers","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Some estimators can also modify the dataset by transforming it"}),"\n",(0,t.jsxs)(n.li,{children:["Done using ",(0,t.jsx)(n.code,{children:"transform()"})," method"]}),"\n",(0,t.jsxs)(n.li,{children:["Sometimes there is a combined method ",(0,t.jsx)(n.code,{children:"fit_transform()"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Predictors","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Can make predictions based on a dataset"}),"\n",(0,t.jsxs)(n.li,{children:["Done using ",(0,t.jsx)(n.code,{children:"predict()"})," method"]}),"\n",(0,t.jsxs)(n.li,{children:["Usually have a ",(0,t.jsx)(n.code,{children:"score()"})," method that returns the quality of prediction"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Inspection - all of the estimator's learned parameter and hyperparameters are publicly accessible"}),"\n",(0,t.jsx)(n.li,{children:"Nonproliferation of classes - uses Numpy arrays for storing datasets"}),"\n",(0,t.jsx)(n.li,{children:"Composition - reuses the same building blocks"}),"\n",(0,t.jsx)(n.li,{children:"Sensible defaults - makes reasonable defaults so it is easy to get an E2E going without tuning"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["To make a custom transformer that still works with other Scikit-Learn functionalities, you need to create a class and implement ",(0,t.jsx)(n.code,{children:"fit()"}),", ",(0,t.jsx)(n.code,{children:"transform()"})," and ",(0,t.jsx)(n.code,{children:"fit_transform()"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"small-transfomer-that-creaters-the-combined-features",children:"Small transfomer that creaters the combined features"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sklearn.base import BaseEstimator, TransformerMixin\n\nroom_ix, bedrooms_ix, population_ix, households_ix = 3, 4, 5, 6\n\nclass CombinedAttributesAdder(BaseEstimator, TransformerMixin):\n    def __init__(self, add_bedrooms_per_room = True): # no *args or **kargs\n        self.add_bedrooms_per_room = add_bedrooms_per_room\n    \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X, y=None):\n        rooms_per_household = X[:, room_ix] / X[:, households_ix]\n        population_per_household = X[:, population_ix] / X[:, households_ix]\n        if self.add_bedrooms_per_room:\n            bedrooms_per_room = X[:, bedrooms_ix] / X[:, room_ix]\n            return np.c_[X, rooms_per_household, population_per_household, bedrooms_per_room]\n\n        else:\n            return np.c_[X, rooms_per_household, population_per_household]\n\nattr_adder = CombinedAttributesAdder(add_bedrooms_per_room=False)\nhousing_extra_attrsibs = attr_adder.transform(housing_df.values)```\n- Transformation pipelines in `scikit-learn` helps you to automate the transformers needed to be applied\n    - ```python\n# Create a simple piepline to auotmate the transformers\n```python\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\n\nnum_pipeline = Pipeline([\n    ('imputer', SimpleImputer(strategy=\"median\")),\n    ('attrsibs_adder', CombinedAttributesAdder()),\n    ('std_scaler', StandardScaler()),\n])\n\nhousing_num_tr = num_pipeline.fit_transform(housing_num)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["All but the last estimator must be transformers (they must have ",(0,t.jsx)(n.code,{children:"fit_transform()"})," method)"]}),"\n",(0,t.jsxs)(n.li,{children:["When you call pipeline's ",(0,t.jsx)(n.code,{children:"fit()"})," method, it will chain call the ",(0,t.jsx)(n.code,{children:"fit_transform()"})," method of the transfomers"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);