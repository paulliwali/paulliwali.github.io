"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[25204],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),m=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=m(a),h=r,d=p["".concat(s,".").concat(h)]||p[h]||u[h]||l;return a?n.createElement(d,o(o({ref:t},c),{},{components:a})):n.createElement(d,o({ref:t},c))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:r,o[1]=i;for(var m=2;m<l;m++)o[m]=a[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},64064:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>m});var n=a(87462),r=(a(67294),a(3905));const l={},o=void 0,i={unversionedId:"slip-box/reference-notes/Intro to OOP",id:"slip-box/reference-notes/Intro to OOP",title:"Intro to OOP",description:"- Metadata",source:"@site/docs/slip-box/reference-notes/Intro to OOP.md",sourceDirName:"slip-box/reference-notes",slug:"/slip-box/reference-notes/Intro to OOP",permalink:"/docs/slip-box/reference-notes/Intro to OOP",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/slip-box/reference-notes/Intro to OOP.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Inside of a Dog - What Dogs See, Smell, and Know",permalink:"/docs/slip-box/reference-notes/Inside of a Dog - What Dogs See, Smell, and Know"},next:{title:"Introduction to Apache Airflow",permalink:"/docs/slip-box/reference-notes/Introduction to Apache Airflow"}},s={},m=[],c={toc:m};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Metadata"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Source: ",(0,r.kt)("a",{parentName:"li",href:"https://youtu.be/SiBw7os-_zI"},"https://youtu.be/SiBw7os-_zI")),(0,r.kt)("li",{parentName:"ul"},"Tags: #programming"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Primitive data types store single, simple values"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"byte, int, float, boolean, string"))),(0,r.kt)("li",{parentName:"ul"},"Programers were and still are fine with just having these primitive, but as it becomes more complex it is cleaner to group similar types of data together",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This led to the introduction of ",(0,r.kt)("strong",{parentName:"li"},"struct")),(0,r.kt)("li",{parentName:"ul"},"Which is like an array but more flexible"),(0,r.kt)("li",{parentName:"ul"},"But it still lacked some key functionalities to support very complex programs"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Objects are instances of a class"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Classes are templates for objects")),(0,r.kt)("li",{parentName:"ul"},"The class contains things that is similar across all objects, but the object represents a singular unique thing"))),(0,r.kt)("li",{parentName:"ul"},"The four main principles of OOP are:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Encapsulation "),(0,r.kt)("li",{parentName:"ul"},"Abstraction"),(0,r.kt)("li",{parentName:"ul"},"Inheritance"),(0,r.kt)("li",{parentName:"ul"},"Polymorphism"))),(0,r.kt)("li",{parentName:"ul"},"Encapsulation ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Is bundling data with methods that can operate on that data within a class")),(0,r.kt)("li",{parentName:"ul"},"This helps to ",(0,r.kt)("strong",{parentName:"li"},"hide")," data as to not be exposed unnecessarily "),(0,r.kt)("li",{parentName:"ul"},"Members of other classes ",(0,r.kt)("strong",{parentName:"li"},"can only interact with the attributes of another object through its methods")),(0,r.kt)("li",{parentName:"ul"},"This is commonly done via getting methods and setting methods"),(0,r.kt)("li",{parentName:"ul"},"Some attributes can be set to be read-only which means that only getter method is defined but not a setter method"),(0,r.kt)("li",{parentName:"ul"},"Generally, you should avoid external classes to directly edit an object\u2019s attributes"))),(0,r.kt)("li",{parentName:"ul"},"Abstraction",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Only showing essential details and keeping everything else hidden")),(0,r.kt)("li",{parentName:"ul"},"Users of your classes should not worry about the details of your classes"),(0,r.kt)("li",{parentName:"ul"},"Divide the code into ",(0,r.kt)("strong",{parentName:"li"},"interface")," and ",(0,r.kt)("strong",{parentName:"li"},"implementation")),(0,r.kt)("li",{parentName:"ul"},"Interface handles how the code communicate to one another",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Done with methods that each class is able to access"))),(0,r.kt)("li",{parentName:"ul"},"Implementation handles how these methods are actually coded",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"How")," the methods achieve the action"))),(0,r.kt)("li",{parentName:"ul"},"==Creating a set interface through which other classes can interact with it ensures that each class can be individually developed and not entangled=="),(0,r.kt)("li",{parentName:"ul"},"Allows the program to be worked on incrementally"))),(0,r.kt)("li",{parentName:"ul"},"Inheritance",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Allows classes to derive from other classes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Access modifiers")," can change which classes have access to other classes, methods, or attributes",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Public",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Can be accessed ",(0,r.kt)("strong",{parentName:"li"},"anywhere"),", even globally"))),(0,r.kt)("li",{parentName:"ul"},"Private",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Can only be accessed from the ",(0,r.kt)("strong",{parentName:"li"},"same class")))),(0,r.kt)("li",{parentName:"ul"},"Protected",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Can only be accessed within the ",(0,r.kt)("strong",{parentName:"li"},"class and any subclasses defined from this class")))))),(0,r.kt)("li",{parentName:"ul"},"Polymorphism",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Methods that are able to take on many forms")),(0,r.kt)("li",{parentName:"ul"},"Dynamic polymorphism allows the method to change its form depending on which class the object was built from",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This avoids the user to have to use ",(0,r.kt)("inlineCode",{parentName:"li"},"if..elif")," to specify which method to use when objects are created from subclasses with the same method name"),(0,r.kt)("li",{parentName:"ul"},"Occurs during runtime"))),(0,r.kt)("li",{parentName:"ul"},"Static polymorphism allows the same methods to be defined with different arguments",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Method overloading")),(0,r.kt)("li",{parentName:"ul"},"This can cause trouble if one doesn\u2019t keep these differences clear"),(0,r.kt)("li",{parentName:"ul"},"This allows the user to define many methods that essentially performs the same task and avoids creating similar named methods for each variation"),(0,r.kt)("li",{parentName:"ul"},"Occurs during compile-time")))))))))}p.isMDXComponent=!0}}]);