"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8260],{42467:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>a});var i=s(85893),t=s(11151);const l={},o=void 0,r={id:"slip-box/reference-notes/Good Coding Practice",title:"Good Coding Practice",description:"- DRY Principle",source:"@site/docs/slip-box/reference-notes/Good Coding Practice.md",sourceDirName:"slip-box/reference-notes",slug:"/slip-box/reference-notes/Good Coding Practice",permalink:"/docs/slip-box/reference-notes/Good Coding Practice",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/slip-box/reference-notes/Good Coding Practice.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Get Started with Roam",permalink:"/docs/slip-box/reference-notes/Get Started with Roam"},next:{title:"Google 43 rules of machine learning",permalink:"/docs/slip-box/reference-notes/Google 43 rules of machine learning"}},c={},a=[];function d(e){const n={blockquote:"blockquote",code:"code",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"#programming"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["DRY Principle","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Don't repeat yourself and remove duplication wherever possible"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["SOLID Principles","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Single responsibility principle","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A class or module should do one thing only"}),"\n",(0,i.jsxs)(n.li,{children:["This is important because we ",(0,i.jsx)(n.strong,{children:"don't want"})," multiple reasons for why the class or module should change"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Open/closed principle","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Open for extension","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The class can be inherited or overwritten"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Closed for modification","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Should not have switch conditions inside that needs to be changed in order to work"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Liskov substitution principle","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Any child type of a parent type should be able to stand in ",(0,i.jsx)(n.strong,{children:"for"})," that parent without things blowing up"]}),"\n",(0,i.jsxs)(n.li,{children:["If you have an ",(0,i.jsx)(n.code,{children:"animal"})," class with ",(0,i.jsx)(n.code,{children:"make_noise()"})," method then any child classes of ",(0,i.jsx)(n.code,{children:"cats"})," and ",(0,i.jsx)(n.code,{children:"dogs"}),", they both should have proper implementations of ",(0,i.jsx)(n.code,{children:"make_noise()"})," and not be throwing an exception"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Interface segregation principle","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Should favour many, smaller, client-specific interfaces ",(0,i.jsx)(n.strong,{children:"over"})," a single, larger, monolithic interface"]}),"\n",(0,i.jsx)(n.li,{children:"If you have an interface with lots of configurations that you have to set up with default values then it is not a good practice"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Dependency inversion principle","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Write code that depends upon abstractions rather than concrete details"}),"\n",(0,i.jsx)(n.li,{children:"Classes that takes in generic variables instead of instantiating a specific value internally"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Law of Demeter","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"An OOP rule that helps to write clean code"}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"For all classes C, and for all methods M attached to C, all objects to which M sends a message must be:"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"M's argument objects, including the self object or"}),"\n",(0,i.jsx)(n.li,{children:"The instance variable objects of C"}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["For all classes C, and for all methods M attached to C, all objects to which M sends a message must be:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"self"})}),"\n",(0,i.jsx)(n.li,{children:"M's argument objects"}),"\n",(0,i.jsx)(n.li,{children:"Instance variable objects of C"}),"\n",(0,i.jsx)(n.li,{children:"Objects created by M, or by functions or methods which M calls"}),"\n",(0,i.jsx)(n.li,{children:"Objects in global variables"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["This means that this law ",(0,i.jsxs)(n.strong,{children:['prohibits "sending a message" to any already existing object that is held in instance variables of ',(0,i.jsx)(n.strong,{children:"other"})," classes, unless it is also held by our class or passed to us as method parameters"]})]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>r,a:()=>o});var i=s(67294);const t={},l=i.createContext(t);function o(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);