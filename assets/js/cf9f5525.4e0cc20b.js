"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[232],{28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var t=s(96540);const i={},l=t.createContext(i);function r(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(l.Provider,{value:n},e.children)}},46826:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"slip-box/reference-notes/Intro to OOP","title":"Intro to OOP","description":"- Metadata","source":"@site/docs/slip-box/reference-notes/Intro to OOP.md","sourceDirName":"slip-box/reference-notes","slug":"/slip-box/reference-notes/Intro to OOP","permalink":"/docs/slip-box/reference-notes/Intro to OOP","draft":false,"unlisted":false,"editUrl":"https://github.com/paulliwali/paulliwali.github.io/tree/main/docs/docs/slip-box/reference-notes/Intro to OOP.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Interesting Words","permalink":"/docs/slip-box/reference-notes/Interesting Words"},"next":{"title":"Introduction to Apache Airflow","permalink":"/docs/slip-box/reference-notes/Introduction to Apache Airflow"}}');var i=s(74848),l=s(28453);const r={},o=void 0,c={},a=[];function h(e){const n={a:"a",code:"code",li:"li",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Metadata"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Source: ",(0,i.jsx)(n.a,{href:"https://youtu.be/SiBw7os-_zI",children:"https://youtu.be/SiBw7os-_zI"})]}),"\n",(0,i.jsx)(n.li,{children:"Tags: #programming"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Primitive data types store single, simple values"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"byte, int, float, boolean, string"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Programers were and still are fine with just having these primitive, but as it becomes more complex it is cleaner to group similar types of data together","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["This led to the introduction of ",(0,i.jsx)(n.strong,{children:"struct"})]}),"\n",(0,i.jsx)(n.li,{children:"Which is like an array but more flexible"}),"\n",(0,i.jsx)(n.li,{children:"But it still lacked some key functionalities to support very complex programs"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Objects are instances of a class"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Classes are templates for objects"})}),"\n",(0,i.jsx)(n.li,{children:"The class contains things that is similar across all objects, but the object represents a singular unique thing"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["The four main principles of OOP are:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Encapsulation"}),"\n",(0,i.jsx)(n.li,{children:"Abstraction"}),"\n",(0,i.jsx)(n.li,{children:"Inheritance"}),"\n",(0,i.jsx)(n.li,{children:"Polymorphism"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Encapsulation","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Is bundling data with methods that can operate on that data within a class"})}),"\n",(0,i.jsxs)(n.li,{children:["This helps to ",(0,i.jsx)(n.strong,{children:"hide"})," data as to not be exposed unnecessarily"]}),"\n",(0,i.jsxs)(n.li,{children:["Members of other classes ",(0,i.jsx)(n.strong,{children:"can only interact with the attributes of another object through its methods"})]}),"\n",(0,i.jsx)(n.li,{children:"This is commonly done via getting methods and setting methods"}),"\n",(0,i.jsx)(n.li,{children:"Some attributes can be set to be read-only which means that only getter method is defined but not a setter method"}),"\n",(0,i.jsx)(n.li,{children:"Generally, you should avoid external classes to directly edit an object\u2019s attributes"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Abstraction","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Only showing essential details and keeping everything else hidden"})}),"\n",(0,i.jsx)(n.li,{children:"Users of your classes should not worry about the details of your classes"}),"\n",(0,i.jsxs)(n.li,{children:["Divide the code into ",(0,i.jsx)(n.strong,{children:"interface"})," and ",(0,i.jsx)(n.strong,{children:"implementation"})]}),"\n",(0,i.jsxs)(n.li,{children:["Interface handles how the code communicate to one another","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Done with methods that each class is able to access"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Implementation handles how these methods are actually coded","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"How"})," the methods achieve the action"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"==Creating a set interface through which other classes can interact with it ensures that each class can be individually developed and not entangled=="}),"\n",(0,i.jsx)(n.li,{children:"Allows the program to be worked on incrementally"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Inheritance","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Allows classes to derive from other classes"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Access modifiers"})," can change which classes have access to other classes, methods, or attributes","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Public","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Can be accessed ",(0,i.jsx)(n.strong,{children:"anywhere"}),", even globally"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Private","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Can only be accessed from the ",(0,i.jsx)(n.strong,{children:"same class"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Protected","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Can only be accessed within the ",(0,i.jsx)(n.strong,{children:"class and any subclasses defined from this class"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Polymorphism","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Methods that are able to take on many forms"})}),"\n",(0,i.jsxs)(n.li,{children:["Dynamic polymorphism allows the method to change its form depending on which class the object was built from","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["This avoids the user to have to use ",(0,i.jsx)(n.code,{children:"if..elif"})," to specify which method to use when objects are created from subclasses with the same method name"]}),"\n",(0,i.jsx)(n.li,{children:"Occurs during runtime"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Static polymorphism allows the same methods to be defined with different arguments","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Method overloading"})}),"\n",(0,i.jsx)(n.li,{children:"This can cause trouble if one doesn\u2019t keep these differences clear"}),"\n",(0,i.jsx)(n.li,{children:"This allows the user to define many methods that essentially performs the same task and avoids creating similar named methods for each variation"}),"\n",(0,i.jsx)(n.li,{children:"Occurs during compile-time"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})}function d(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);