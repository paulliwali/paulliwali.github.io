"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1189],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var r=t(96540);const o={},s=r.createContext(o);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:n},e.children)}},85629:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"slip-box/reference-notes/Introduction to Apache Airflow","title":"Introduction to Apache Airflow","description":"Metadata:*","source":"@site/docs/slip-box/reference-notes/Introduction to Apache Airflow.md","sourceDirName":"slip-box/reference-notes","slug":"/slip-box/reference-notes/Introduction to Apache Airflow","permalink":"/docs/slip-box/reference-notes/Introduction to Apache Airflow","draft":false,"unlisted":false,"editUrl":"https://github.com/paulliwali/paulliwali.github.io/tree/main/docs/docs/slip-box/reference-notes/Introduction to Apache Airflow.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Intro to OOP","permalink":"/docs/slip-box/reference-notes/Intro to OOP"},"next":{"title":"Introduction to Big Data","permalink":"/docs/slip-box/reference-notes/Introduction to Big Data"}}');var o=t(74848),s=t(28453);const i={},c=void 0,l={},a=[];function d(e){const n={a:"a",code:"code",li:"li",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Metadata:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"#article #data-science"}),"\n",(0,o.jsxs)(n.li,{children:["Source: ",(0,o.jsx)(n.a,{href:"https://khashtamov.com/en/introduction-to-apache-airflow/",children:"Introduction to Apache Airflow"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Created in 2014 by Maxime Beauchemin at Airbnb"}),"\n",(0,o.jsxs)(n.li,{children:["A swiss-army knife to build data pipelines using ",(0,o.jsx)(n.strong,{children:"directed acyclic graph (DAG)"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Describes the dependencies in your job"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Each node in the DAG is an ",(0,o.jsx)(n.strong,{children:"operator"}),", and Airflow has various operators for each type of job","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Operator ",(0,o.jsx)(n.strong,{children:"can't get a return value from previous operator/job"})," because they can be executed in a distributed fashion"]}),"\n",(0,o.jsxs)(n.li,{children:["An operator that react to an event is a ",(0,o.jsx)(n.strong,{children:"sensor"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["For example, a ",(0,o.jsx)(n.code,{children:"S3Senor"})," can check if an object exists in a S3 bucket and perform something"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:"Hooks are used to interact with external services and used to build Operators"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Executor is responsible for how tasks are going to be executed","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"SequentialExecutor - default executor but doesn't support parallel so not ideal for production"}),"\n",(0,o.jsx)(n.li,{children:"LocalExecutor - use separate executor for parallel execution but can't scale horizontally and is not fault tolerant"}),"\n",(0,o.jsx)(n.li,{children:"CeleryExecutor - most popular executor for production, uses Celery task queue but requires broker (Redis, RabbitMQ, etc)"}),"\n",(0,o.jsx)(n.li,{children:"DaskExecutor - Similar to Celery but uses Dask"}),"\n",(0,o.jsx)(n.li,{children:"KubernetesExecutor - uses Kubernestes cluster for task execution"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Using ",(0,o.jsx)(n.code,{children:"Operator1 >> Operator2"})," to build the DAG logic"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);