"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[29823],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var s=t(96540);const r={},i=s.createContext(r);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:n},e.children)}},40699:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"slip-box/reference-notes/Advanced Data Structures","title":"Advanced Data Structures","description":"MIT Open Course Ware: MIT 6.851","source":"@site/docs/slip-box/reference-notes/Advanced Data Structures.md","sourceDirName":"slip-box/reference-notes","slug":"/slip-box/reference-notes/Advanced Data Structures","permalink":"/docs/slip-box/reference-notes/Advanced Data Structures","draft":false,"unlisted":false,"editUrl":"https://github.com/paulliwali/paulliwali.github.io/tree/main/docs/docs/slip-box/reference-notes/Advanced Data Structures.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"AI Agent","permalink":"/docs/slip-box/reference-notes/AI Agent"},"next":{"title":"Aggregation Theory","permalink":"/docs/slip-box/reference-notes/Aggregation Theory"}}');var r=t(74848),i=t(28453);const l={},o="Persistent Data Structures",c={},a=[];function d(e){const n={a:"a",em:"em",h1:"h1",header:"header",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["MIT Open Course Ware: MIT 6.851\nProfessor: Erik Demaine\nLink: ",(0,r.jsx)(n.a,{href:"https://www.youtube.com/watch?v=T0yzrZL1py0&list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf",children:"https://www.youtube.com/watch?v=T0yzrZL1py0&list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf"})]}),"\n",(0,r.jsx)(n.p,{children:"Covers: time travel, geometry, dynamic optimality, memory hierarchy, hashing, integers, strings, dynamic graphs, succinct"}),"\n",(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"persistent-data-structures",children:"Persistent Data Structures"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["one kind of models of computation is - pointer machine","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"a node of fields that points to other nodes of fields"}),"\n",(0,r.jsx)(n.li,{children:"allow operations"}),"\n",(0,r.jsx)(n.li,{children:"has a root node and everything done is with respect to the root node"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["temporal data structure takes the pointer machine and add cool stuff to it","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"persistence - branching universe"}),"\n",(0,r.jsx)(n.li,{children:"retroactivity - single timeline universe"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["persistence","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"keep all versions of the data structure"}),"\n",(0,r.jsx)(n.li,{children:"all operations are relative to the specified version"}),"\n",(0,r.jsx)(n.li,{children:"update makes and returns a new version"}),"\n",(0,r.jsxs)(n.li,{children:["4 levels of persistence","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["partial persistence","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["only allowed to update the ",(0,r.jsx)(n.em,{children:"latest"})," version"]}),"\n",(0,r.jsxs)(n.li,{children:["versions are ",(0,r.jsx)(n.em,{children:"linearly ordered"})]}),"\n",(0,r.jsx)(n.li,{children:"can query the old versions but you can't change them"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["full persistence","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["you can update ",(0,r.jsx)(n.em,{children:"any"})," version"]}),"\n",(0,r.jsxs)(n.li,{children:["versions are ",(0,r.jsx)(n.em,{children:"tree structured"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);