"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[34086],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(a),d=r,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return a?n.createElement(h,l(l({ref:t},p),{},{components:a})):n.createElement(h,l({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},20398:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const i={},l=void 0,o={unversionedId:"roam/Good Coding Practice",id:"roam/Good Coding Practice",title:"Good Coding Practice",description:"- DRY Principle",source:"@site/docs/roam/Good Coding Practice.md",sourceDirName:"roam",slug:"/roam/Good Coding Practice",permalink:"/docs/roam/Good Coding Practice",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/roam/Good Coding Practice.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Elements of Statistical Learning",permalink:"/docs/roam/Elements of Statistical Learning"},next:{title:"Inadequate Equilibrium",permalink:"/docs/roam/Inadequate Equilibrium"}},s={},c=[],p={toc:c};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"DRY Principle",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Don't repeat yourself and remove duplication wherever possible"))),(0,r.kt)("li",{parentName:"ul"},"SOLID Principles",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Single responsibility principle",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"A class or module should do one thing only"),(0,r.kt)("li",{parentName:"ul"},"This is important because we ",(0,r.kt)("strong",{parentName:"li"},"don't want")," multiple reasons for why the class or module should change"))),(0,r.kt)("li",{parentName:"ul"},"Open/closed principle",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Open for extension",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The class can be inherited or overwritten"))),(0,r.kt)("li",{parentName:"ul"},"Closed for modification",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Should not have switch conditions inside that needs to be changed in order to work"))))),(0,r.kt)("li",{parentName:"ul"},"Liskov substitution principle",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Any child type of a parent type should be able to stand in ",(0,r.kt)("strong",{parentName:"li"},"for")," that parent without things blowing up"),(0,r.kt)("li",{parentName:"ul"},"If you have an ",(0,r.kt)("inlineCode",{parentName:"li"},"animal")," class with ",(0,r.kt)("inlineCode",{parentName:"li"},"make_noise()")," method then any child classes of ",(0,r.kt)("inlineCode",{parentName:"li"},"cats")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"dogs"),", they both should have proper implementations of ",(0,r.kt)("inlineCode",{parentName:"li"},"make_noise()")," and not be throwing an exception "))),(0,r.kt)("li",{parentName:"ul"},"Interface segregation principle",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Should favour many, smaller, client-specific interfaces ",(0,r.kt)("strong",{parentName:"li"},"over")," a single, larger, monolithic interface"),(0,r.kt)("li",{parentName:"ul"},"If you have an interface with lots of configurations that you have to set up with default values then it is not a good practice"))),(0,r.kt)("li",{parentName:"ul"},"Dependency inversion principle",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Write code that depends upon abstractions rather than concrete details"),(0,r.kt)("li",{parentName:"ul"},"Classes that takes in generic variables instead of instantiating a specific value internally"))))),(0,r.kt)("li",{parentName:"ul"},"Law of Demeter",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"An OOP rule that helps to write clean code"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"For all classes C, and for all methods M attached to C, all objects to which M sends a message must be:")))),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"M's argument objects, including the self object or"),(0,r.kt)("li",{parentName:"ul"},"The instance variable objects of C")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"For all classes C, and for all methods M attached to C, all objects to which M sends a message must be:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"self")),(0,r.kt)("li",{parentName:"ul"},"M's argument objects"),(0,r.kt)("li",{parentName:"ul"},"Instance variable objects of C"),(0,r.kt)("li",{parentName:"ul"},"Objects created by M, or by functions or methods which M calls"),(0,r.kt)("li",{parentName:"ul"},"Objects in global variables"))),(0,r.kt)("li",{parentName:"ul"},"This means that this law ",(0,r.kt)("strong",{parentName:"li"},'prohibits "sending a message" to any already existing object that is held in instance variables of ',(0,r.kt)("strong",{parentName:"strong"},"other")," classes, unless it is also held by our class or passed to us as method parameters"))))))}u.isMDXComponent=!0}}]);