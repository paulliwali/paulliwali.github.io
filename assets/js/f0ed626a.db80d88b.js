"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[58673],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),m=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=m(r),c=a,f=u["".concat(l,".").concat(c)]||u[c]||d[c]||o;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var m=2;m<o;m++)i[m]=r[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},56137:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var n=r(87462),a=(r(67294),r(3905));const o={},i=void 0,s={unversionedId:"slip-box/reference-notes/Scikit-Learn",id:"slip-box/reference-notes/Scikit-Learn",title:"Scikit-Learn",description:"- Library that implements many ready to use Machine Learning algorithms",source:"@site/docs/slip-box/reference-notes/Scikit-Learn.md",sourceDirName:"slip-box/reference-notes",slug:"/slip-box/reference-notes/Scikit-Learn",permalink:"/docs/slip-box/reference-notes/Scikit-Learn",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/slip-box/reference-notes/Scikit-Learn.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SQL Crash Course",permalink:"/docs/slip-box/reference-notes/SQL Crash Course"},next:{title:"Slow Living",permalink:"/docs/slip-box/reference-notes/Slow Living"}},l={},m=[],p={toc:m};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Library that implements many ready to use Machine Learning algorithms"),(0,a.kt)("li",{parentName:"ul"},"Core API design principles",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Consistency - all objects share the same simple interface",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Estimators",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Can estimate some parameters based on a dataset"),(0,a.kt)("li",{parentName:"ul"},"Done using ",(0,a.kt)("inlineCode",{parentName:"li"},"fit()")," method"),(0,a.kt)("li",{parentName:"ul"},"Takes the dataset as a parameter (2 for supervised) and maybe another parameter as the hyperparameter"))),(0,a.kt)("li",{parentName:"ul"},"Transformers",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Some estimators can also modify the dataset by transforming it"),(0,a.kt)("li",{parentName:"ul"},"Done using ",(0,a.kt)("inlineCode",{parentName:"li"},"transform()")," method"),(0,a.kt)("li",{parentName:"ul"},"Sometimes there is a combined method ",(0,a.kt)("inlineCode",{parentName:"li"},"fit_transform()")))),(0,a.kt)("li",{parentName:"ul"},"Predictors",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Can make predictions based on a dataset"),(0,a.kt)("li",{parentName:"ul"},"Done using ",(0,a.kt)("inlineCode",{parentName:"li"},"predict()")," method"),(0,a.kt)("li",{parentName:"ul"},"Usually have a ",(0,a.kt)("inlineCode",{parentName:"li"},"score()")," method that returns the quality of prediction "))))),(0,a.kt)("li",{parentName:"ul"},"Inspection - all of the estimator's learned parameter and hyperparameters are publicly accessible"),(0,a.kt)("li",{parentName:"ul"},"Nonproliferation of classes - uses Numpy arrays for storing datasets"),(0,a.kt)("li",{parentName:"ul"},"Composition - reuses the same building blocks"),(0,a.kt)("li",{parentName:"ul"},"Sensible defaults - makes reasonable defaults so it is easy to get an E2E going without tuning"))),(0,a.kt)("li",{parentName:"ul"},"To make a custom transformer that still works with other Scikit-Learn functionalities, you need to create a class and implement ",(0,a.kt)("inlineCode",{parentName:"li"},"fit()"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"transform()")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"fit_transform()"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-python"},"")))))),(0,a.kt)("h1",{id:"small-transfomer-that-creaters-the-combined-features"},"Small transfomer that creaters the combined features"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn.base import BaseEstimator, TransformerMixin\n\nroom_ix, bedrooms_ix, population_ix, households_ix = 3, 4, 5, 6\n\nclass CombinedAttributesAdder(BaseEstimator, TransformerMixin):\n    def __init__(self, add_bedrooms_per_room = True): # no *args or **kargs\n        self.add_bedrooms_per_room = add_bedrooms_per_room\n    \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X, y=None):\n        rooms_per_household = X[:, room_ix] / X[:, households_ix]\n        population_per_household = X[:, population_ix] / X[:, households_ix]\n        if self.add_bedrooms_per_room:\n            bedrooms_per_room = X[:, bedrooms_ix] / X[:, room_ix]\n            return np.c_[X, rooms_per_household, population_per_household, bedrooms_per_room]\n\n        else:\n            return np.c_[X, rooms_per_household, population_per_household]\n\nattr_adder = CombinedAttributesAdder(add_bedrooms_per_room=False)\nhousing_extra_attrsibs = attr_adder.transform(housing_df.values)```\n- Transformation pipelines in `scikit-learn` helps you to automate the transformers needed to be applied\n    - ```python\n# Create a simple piepline to auotmate the transformers\n```python\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\n\nnum_pipeline = Pipeline([\n    ('imputer', SimpleImputer(strategy=\"median\")),\n    ('attrsibs_adder', CombinedAttributesAdder()),\n    ('std_scaler', StandardScaler()),\n])\n\nhousing_num_tr = num_pipeline.fit_transform(housing_num)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"All but the last estimator must be transformers (they must have ",(0,a.kt)("inlineCode",{parentName:"li"},"fit_transform()")," method)"),(0,a.kt)("li",{parentName:"ul"},"When you call pipeline's ",(0,a.kt)("inlineCode",{parentName:"li"},"fit()")," method, it will chain call the ",(0,a.kt)("inlineCode",{parentName:"li"},"fit_transform()")," method of the transfomers")))}u.isMDXComponent=!0}}]);