"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[57716],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,f=u["".concat(s,".").concat(d)]||u[d]||p[d]||o;return n?a.createElement(f,i(i({ref:t},m),{},{components:n})):a.createElement(f,i({ref:t},m))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},21608:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={source:"https://hakibenita.com/sql-for-data-analysis",author:"Haki Benita",tags:["sql","data-science"]},i="\ud83d\udcf0 Summary (use your own words)",l={unversionedId:"slip-box/reference-notes/Practical SQL for Data Analysis",id:"slip-box/reference-notes/Practical SQL for Data Analysis",title:"\ud83d\udcf0 Summary (use your own words)",description:"SQL code for fast data analysis so one can skip using Pandas if not needed. This article is showcasing PostgreSQL.",source:"@site/docs/slip-box/reference-notes/Practical SQL for Data Analysis.md",sourceDirName:"slip-box/reference-notes",slug:"/slip-box/reference-notes/Practical SQL for Data Analysis",permalink:"/docs/slip-box/reference-notes/Practical SQL for Data Analysis",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/slip-box/reference-notes/Practical SQL for Data Analysis.md",tags:[{label:"sql",permalink:"/docs/tags/sql"},{label:"data-science",permalink:"/docs/tags/data-science"}],version:"current",frontMatter:{source:"https://hakibenita.com/sql-for-data-analysis",author:"Haki Benita",tags:["sql","data-science"]},sidebar:"tutorialSidebar",previous:{title:"Polynomial regression model",permalink:"/docs/slip-box/reference-notes/Polynomial regression model"},next:{title:"Primer on casual inference",permalink:"/docs/slip-box/reference-notes/Primer on casual inference"}},s={},c=[{value:"Common Table Expressions (CTE)",id:"common-table-expressions-cte",level:2},{value:"Generating Data",id:"generating-data",level:2},{value:"Sampling",id:"sampling",level:2}],m={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"-summary-use-your-own-words"},"\ud83d\udcf0 Summary (use your own words)"),(0,r.kt)("p",null,"SQL code for fast data analysis so one can skip using Pandas if not needed. This article is showcasing PostgreSQL."),(0,r.kt)("h1",{id:"\ufe0f-notes"},"\u270d\ufe0f Notes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"There is a high cost in loading data into Pandas, so it is often not worth it for ad-hoc analysis ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Or it is worth pre-analysis in SQL itself before fetching it into Pandas")))),(0,r.kt)("h2",{id:"common-table-expressions-cte"},"Common Table Expressions (CTE)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Good for recursive queries "),(0,r.kt)("li",{parentName:"ul"},"Good for readibility and modularity")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"WITH emails AS (\n    SELECT 'PAUL.DENG@test.com' AS email\n), \nnormalized_emails AS ( \n    SELECT lower(email) as email FROM emails\n)\nSELECT * FROM normalized_emails;\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"email"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"mailto:paul.deng@test.com"},"paul.deng@test.com"))))),(0,r.kt)("h2",{id:"generating-data"},"Generating Data"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Useful for joining data to"),(0,r.kt)("li",{parentName:"ul"},"Can use ",(0,r.kt)("inlineCode",{parentName:"li"},"UNION ALL")," to concat data, ",(0,r.kt)("inlineCode",{parentName:"li"},"VALUE LIST")," to create constant data, ",(0,r.kt)("inlineCode",{parentName:"li"},"UNNEST")," to generate small 1 dimensional data from a list"),(0,r.kt)("li",{parentName:"ul"},"A really useful command is to use ",(0,r.kt)("inlineCode",{parentName:"li"},"GENERATE_SERIES")," for large amounts of data with a fixed step and can be used for time series")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"WITH daterange AS (\n    SELECT *\n    FROM generate_series(\n        '2023-01-01 UTC'::timestamptz, --start\n        '2023-01-02 UTC'::timestamptz, --end\n        INTERVAL '1 hour' --step\n    ) WITH ORDINALITY AS t(hh, n)\n)\nSELECT * FROM daterange\n")),(0,r.kt)("h2",{id:"sampling"},"Sampling"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To produce random numbers, one can use ",(0,r.kt)("inlineCode",{parentName:"li"},"ceil(random())")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"floor(random())")," "),(0,r.kt)("li",{parentName:"ul"},"Don't use ",(0,r.kt)("inlineCode",{parentName:"li"},"round(random())")," because it doesn't retain the distribution")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT \n    ceil(random() * 3) AS n,\n    count(*)\nFROM generate_series(0, 1000)\nGROUP BY 1\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"One can extend this to produce random choice")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT \n    (array['RED', 'BLUE', 'GREEN'])[ceil(random() * 3)] AS color \nFROM generate_series(1, 5)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To sample you can use ",(0,r.kt)("inlineCode",{parentName:"li"},"random()")," but it is pretty inefficient"),(0,r.kt)("li",{parentName:"ul"},"So PostgreSQL has two methods: ",(0,r.kt)("inlineCode",{parentName:"li"},"system")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"bernoulli"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"system")," is done with blocks so it is faster")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- using random\nWITH random_sample AS ( \n    SELECT * \n    FROM users \n    ORDER BY random() LIMIT 1000\n)\nSELECT count(*) FROM random_sample\n\n-- using system\nWITH system_sample AS (\n    SELECT *\n    FROM users TABLESAMPLE() SYSTEM(10) -- argument is percentage\n)\nSELECT count(*) FROM system_sample\n\n-- using bernoulli \nWITH bernoulli_sample AS (\n    SELECT *\n    FROM users TABLESAMPLE() BERNOULLI(10) -- argument is percentage\n)\nSELECT count(*) FROM bernoulli_sample\n")))}u.isMDXComponent=!0}}]);