"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[15030],{65128:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>l});var c=r(85893),s=r(11151);const a={},i="Git Basics",t={id:"code/git-basics",title:"Git Basics",description:"Clone single branch from repo",source:"@site/docs/code/git-basics.md",sourceDirName:"code",slug:"/code/git-basics",permalink:"/docs/code/git-basics",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/code/git-basics.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"General Coding Principles",permalink:"/docs/code/general"},next:{title:"Github",permalink:"/docs/code/github"}},o={},l=[];function d(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h1,{id:"git-basics",children:"Git Basics"}),"\n",(0,c.jsx)(n.p,{children:"Clone single branch from repo"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"git clone -b <branch name> --single-branch <repo-url> <folder name>\n"})}),"\n",(0,c.jsx)(n.p,{children:"Fetch another remote branch after a single-branch clone"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"git remote set-branches --add origin <remote-branch-name>\ngit fetch origin <remote-branch-name>:<local-branch-name>\n"})}),"\n",(0,c.jsxs)(n.p,{children:["Squash and interactive rebase (can ",(0,c.jsx)(n.code,{children:"pick"}),", ",(0,c.jsx)(n.code,{children:"squash"})," or ",(0,c.jsx)(n.code,{children:"reword"})," individual commits)"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"# Rebase from current branch\ngit rebase -i HEAD~[number of commits]\n\n# Rebase from a different branch\ngit checkout <main-branch-name>\ngit pull origin\ngit checkout <dev-branch-name>\ngit rebase -i <main-branch-name>\n"})}),"\n",(0,c.jsx)(n.p,{children:"Force push to remote branch to overwrite history"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"git push origin <branch-name> --force\n"})}),"\n",(0,c.jsx)(n.p,{children:"Force pull to local branch overwrite history"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"git fetch --all  # update all branches\ngit checkout -b backup-master\ngit reset --hard origin/master\n"})}),"\n",(0,c.jsx)(n.p,{children:"Undo commits"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"# soft is reversible\ngit reset --soft HEAD~n\n# hard is irreversible\ngit reset --hard HEAD~n\n"})}),"\n",(0,c.jsx)(n.p,{children:"Check diff between current and history"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"git show HEAD~1\ngit show <COMMIT>\n"})}),"\n",(0,c.jsx)(n.p,{children:"Go to a specific commit and be in a detached state"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"git checkout -b <new-branch-name> <SHA1>\n"})}),"\n",(0,c.jsxs)(n.p,{children:["One-liner git log alias to ",(0,c.jsx)(n.code,{children:"git prettylog"})]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'git config --global alias.prettylog "log --all --decorate --oneline --graph"\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>t,a:()=>i});var c=r(67294);const s={},a=c.createContext(s);function i(e){const n=c.useContext(a);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),c.createElement(a.Provider,{value:n},e.children)}}}]);