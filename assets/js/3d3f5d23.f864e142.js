"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[17192],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),m=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=m(r),c=n,f=u["".concat(s,".").concat(c)]||u[c]||d[c]||o;return r?a.createElement(f,i(i({ref:t},p),{},{components:r})):a.createElement(f,i({ref:t},p))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:n,i[1]=l;for(var m=2;m<o;m++)i[m]=r[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},81565:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var a=r(87462),n=(r(67294),r(3905));const o={},i=void 0,l={unversionedId:"roam/Scikit-Learn",id:"roam/Scikit-Learn",title:"Scikit-Learn",description:"- Library that implements many ready to use Machine Learning algorithms",source:"@site/docs/roam/Scikit-Learn.md",sourceDirName:"roam",slug:"/roam/Scikit-Learn",permalink:"/docs/roam/Scikit-Learn",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/roam/Scikit-Learn.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SQL",permalink:"/docs/roam/SQL"},next:{title:"Scipy Lecture Notes",permalink:"/docs/roam/Scipy Lecture Notes"}},s={},m=[],p={toc:m};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Library that implements many ready to use Machine Learning algorithms"),(0,n.kt)("li",{parentName:"ul"},"Core API design principles",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Consistency - all objects share the same simple interface",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Estimators",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Can estimate some parameters based on a dataset"),(0,n.kt)("li",{parentName:"ul"},"Done using ",(0,n.kt)("inlineCode",{parentName:"li"},"fit()")," method"),(0,n.kt)("li",{parentName:"ul"},"Takes the dataset as a parameter (2 for supervised) and maybe another parameter as the hyperparameter"))),(0,n.kt)("li",{parentName:"ul"},"Transformers",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Some estimators can also modify the dataset by transforming it"),(0,n.kt)("li",{parentName:"ul"},"Done using ",(0,n.kt)("inlineCode",{parentName:"li"},"transform()")," method"),(0,n.kt)("li",{parentName:"ul"},"Sometimes there is a combined method ",(0,n.kt)("inlineCode",{parentName:"li"},"fit_transform()")))),(0,n.kt)("li",{parentName:"ul"},"Predictors",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Can make predictions based on a dataset"),(0,n.kt)("li",{parentName:"ul"},"Done using ",(0,n.kt)("inlineCode",{parentName:"li"},"predict()")," method"),(0,n.kt)("li",{parentName:"ul"},"Usually have a ",(0,n.kt)("inlineCode",{parentName:"li"},"score()")," method that returns the quality of prediction "))))),(0,n.kt)("li",{parentName:"ul"},"Inspection - all of the estimator's learned parameter and hyperparameters are publicly accessible"),(0,n.kt)("li",{parentName:"ul"},"Nonproliferation of classes - uses Numpy arrays for storing datasets"),(0,n.kt)("li",{parentName:"ul"},"Composition - reuses the same building blocks"),(0,n.kt)("li",{parentName:"ul"},"Sensible defaults - makes reasonable defaults so it is easy to get an E2E going without tuning"))),(0,n.kt)("li",{parentName:"ul"},"To make a custom transformer that still works with other Scikit-Learn functionalities, you need to create a class and implement ",(0,n.kt)("inlineCode",{parentName:"li"},"fit()"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"transform()")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"fit_transform()"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-python"},"")))))),(0,n.kt)("h1",{id:"small-transfomer-that-creaters-the-combined-features"},"Small transfomer that creaters the combined features"),(0,n.kt)("p",null,"from sklearn.base import BaseEstimator, TransformerMixin"),(0,n.kt)("p",null,"room_ix, bedrooms_ix, population_ix, households_ix = 3, 4, 5, 6"),(0,n.kt)("p",null,"class CombinedAttributesAdder(BaseEstimator, TransformerMixin):\ndef ",(0,n.kt)("strong",{parentName:"p"},"init"),"(self, add_bedrooms_per_room = True): # no *args or **kargs\nself.add_bedrooms_per_room = add_bedrooms_per_room"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"def fit(self, X, y=None):\n    return self\n\ndef transform(self, X, y=None):\n    rooms_per_household = X[:, room_ix] / X[:, households_ix]\n    population_per_household = X[:, population_ix] / X[:, households_ix]\n    if self.add_bedrooms_per_room:\n        bedrooms_per_room = X[:, bedrooms_ix] / X[:, room_ix]\n        return np.c_[X, rooms_per_household, population_per_household, bedrooms_per_room]\n\n    else:\n        return np.c_[X, rooms_per_household, population_per_household]\n")),(0,n.kt)("p",null,"attr_adder = CombinedAttributesAdder(add_bedrooms_per_room=False)\nhousing_extra_attrsibs = attr_adder.transform(housing_df.values)```"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Transformation pipelines in ",(0,n.kt)("inlineCode",{parentName:"li"},"scikit-learn")," helps you to automate the transformers needed to be applied",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-python"},"")))))),(0,n.kt)("h1",{id:"create-a-simple-piepline-to-auotmate-the-transformers"},"Create a simple piepline to auotmate the transformers"),(0,n.kt)("p",null,"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler"),(0,n.kt)("p",null,"num_pipeline = Pipeline(","[\n('imputer', SimpleImputer(strategy=\"median\")),\n('attrsibs_adder', CombinedAttributesAdder()),\n('std_scaler', StandardScaler()),\n]",")"),(0,n.kt)("p",null,"housing_num_tr = num_pipeline.fit_transform(housing_num)```"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"- All but the last estimator must be transformers (they must have `fit_transform()` method)\n- When you call pipeline's `fit()` method, it will chain call the `fit_transform()` method of the transfomers\n- in\n")))}u.isMDXComponent=!0}}]);