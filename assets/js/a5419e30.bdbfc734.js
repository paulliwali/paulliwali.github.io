"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[82607],{69631:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var r=t(85893),s=t(11151);const i={},a="Python Basics",l={id:"slip-box/reference-notes/Python Cheat Sheet",title:"Python Basics",description:"Sets",source:"@site/docs/slip-box/reference-notes/Python Cheat Sheet.md",sourceDirName:"slip-box/reference-notes",slug:"/slip-box/reference-notes/Python Cheat Sheet",permalink:"/docs/slip-box/reference-notes/Python Cheat Sheet",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/slip-box/reference-notes/Python Cheat Sheet.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Pythagorean expectation",permalink:"/docs/slip-box/reference-notes/Pythagorean expectation"},next:{title:"Quadratic Programming",permalink:"/docs/slip-box/reference-notes/Quadratic Programming"}},o={},d=[{value:"Sets",id:"sets",level:2},{value:"List",id:"list",level:2},{value:"Dictionary",id:"dictionary",level:2},{value:"Time and Dates",id:"time-and-dates",level:2},{value:"Imports",id:"imports",level:2},{value:"Built-ins",id:"built-ins",level:2},{value:"Decorators",id:"decorators",level:2},{value:"Decorate functions without arguments",id:"decorate-functions-without-arguments",level:3},{value:"Decorate functions with arguments",id:"decorate-functions-with-arguments",level:3},{value:"Decorate class with a function",id:"decorate-class-with-a-function",level:3},{value:"Useful decorators",id:"useful-decorators",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"python-basics",children:"Python Basics"}),"\n",(0,r.jsx)(n.h2,{id:"sets",children:"Sets"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Removes duplicates easily"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"list",children:"List"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Able to be sorted"}),"\n",(0,r.jsx)(n.li,{children:"list comprehension"}),"\n",(0,r.jsx)(n.li,{children:"mode, min and max"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"dictionary",children:"Dictionary"}),"\n",(0,r.jsxs)(n.p,{children:["Dictionary comprehension for filtering items in ",(0,r.jsx)(n.code,{children:"some_dict"})," that exists in ",(0,r.jsx)(n.code,{children:"some_list"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"some_list = [1, 2, 3]\nnew_dict = {k: v for k, v in some_dict.itmes() if k in some_list}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Nested dictionary comprehension"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"some_list = [1, 2, 3]\nnew_dict = {\n outer_k: {\n  inner_k: inner_v for inner_k, inner_v in outer_v.items() if inner_k in some_list\n } for outer_k, outer_v in some_dict.items() if outer_k in some_list\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"time-and-dates",children:"Time and Dates"}),"\n",(0,r.jsxs)(n.p,{children:["Don't initialize timezone when creating datetime objects, localize the naive datetime. ",(0,r.jsx)(n.a,{href:"http://pytz.sourceforge.net/#localized-times-and-date-arithmetic",children:"Source"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import pytz\nfrom datetime import datetime\n\npdt = pytz.timezone('America/Los_Angeles')\nbad_tz_aware_datetime = datetime(2014, 1, 1, tzinfo=pdt)\nnaive_datetime = datetime(2014, 1, 1)\ngood_tz_aware_datetime = pdt.localize(naive_datetime)\n\npd.to_datetime(observation_df['enter_epoch_ms'], unit='ms', utc=True).dt.tz_convert(observation_df[\"timezone\"])\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"## Logging\n\n```python\n# Setup logger for scripts\nimport logging\n# Create a custom logger\nlogger = logging.getLogger(__name__)\n# Create handlers\nc_handler = logging.StreamHandler()\nf_handler = logging.FileHandler('file.log')\nc_handler.setLevel(logging.WARNING)\nf_handler.setLevel(logging.ERROR)\n# Create formatters and add it to handlers\nc_format = logging.Formatter('%(name)s - %(levelname)s - %(message)s')\nf_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nc_handler.setFormatter(c_format)\nf_handler.setFormatter(f_format)\n# Add handlers to the logger\nlogger.addHandler(c_handler)\nlogger.addHandler(f_handler)\nlogger.warning('This is a warning')\nlogger.error('This is an error')\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Computation of arguments passed to the logging method can be expensive, so they should be avoided if the logger will just throw the event away. Thus, using string formatting ",(0,r.jsx)(n.code,{children:"%s"})," over f-string formatting in logging messages is more optimal, since the arguments are deferred until it cannot be avoided."]}),"\n",(0,r.jsx)(n.h2,{id:"imports",children:"Imports"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Import modules from root 'src' folder\nimport sys\nsrc_path = os.path.abspath(\"../../src\")\nif src_path not in sys.path:\n    sys.path.append(src_path)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"built-ins",children:"Built-ins"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"yield"})," - gets a generator object from the function. When Python calls a function with ",(0,r.jsx)(n.code,{children:"yield"})," it will execute code up to it and pauses to deliver the object, when it is called again it will resume from that statement until the next ",(0,r.jsx)(n.code,{children:"yield"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"generators"})," - a special kind of ",(0,r.jsx)(n.code,{children:"iterator"})," that you can only iterator over once and doesn't store values in memory"]}),"\n",(0,r.jsx)(n.h2,{id:"decorators",children:"Decorators"}),"\n",(0,r.jsx)(n.p,{children:"Used in python as syntatic sugar for passing functions to functions and returning new functions."}),"\n",(0,r.jsx)(n.h3,{id:"decorate-functions-without-arguments",children:"Decorate functions without arguments"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from timeit import default_timer as timer\nfrom time import sleep\nfrom typing import Callable\n\ndef measure(func: Callable):\n def inner(*args, **kwargs):\n  print(f'---\x3e Calling {func.__name__}()')\n  start = timer()\n  func(*args, **kwargs)\n  elapsed_sec = timer() - start\n  print(f'---\x3e Done {func.__name__}(): {elapsed_sec:.3f} secs')\n return inner\n\ndef sleeper(seconds: int = 0):\n print('Going to sleep...')\n sleep(seconds)\n print('Done!')\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Instead of calling the ",(0,r.jsx)(n.code,{children:"sleeper"})," function within measure"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"measured_sleeper = measure(sleeper)\nmeasured_sleeper(3)\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"---\x3e Calling sleeper()\nGoing to sleep...\nDone!\n---\x3e Done sleeper(): 3.003 secs\n"})}),"\n",(0,r.jsx)(n.p,{children:"We can use the decorator syntax to do this succinctly by wrapping the original function"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"@measure\ndef sleeper(seconds: int = 0):\n print('Going to sleep...')\n sleep(seconds)\n print('Done!')\n\nsleeper(3)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"decorate-functions-with-arguments",children:"Decorate functions with arguments"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from typing import Callable\n\ndef repeat(n: int = 1):\n def decorator(func: Callable):\n  def inner(*args, **kwargs):\n   for _ in range(n):\n    func(*args, **kwargs)\n  return inner\n return decorator\n\n@repeat(n=3)\ndef hello(name: str):\n print(f'Hello {name}!')\n\nhello(\"world\")\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Hello world!\nHello world!\nHello world!\n"})}),"\n",(0,r.jsx)(n.h3,{id:"decorate-class-with-a-function",children:"Decorate class with a function"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from typing import Callable\n\ndef trace(cls: type):\n def make_traced(cls: type, method_name: str, method: Callable):\n  def traced_method(*args, **kwargs):\n   print(f'Executing {cls.__name__}::{method_name}...')\n   return method(*args, **kwargs)\n  return traced_method\n for name in cls.__dict__.keys():\n  if callable(getattr(cls, name)) and name != \"__class__\":\n   setattr(cls, name, make_traced(cls, name, getattr(cls, name)))\n return cls\n\n@trace\nclass Foo:\n i: int = 0\n def __init__(self, i: int = 0):\n  self.i = i\n def increment(self):\n  self.i += 1\n def __str__(self):\n  return f'This is a {self.__class__.__name__} object with i = {self.i}'\n"})}),"\n",(0,r.jsx)(n.h1,{id:"numpy",children:"Numpy"}),"\n",(0,r.jsx)(n.h1,{id:"pandas",children:"Pandas"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Remember ",(0,r.jsx)(n.code,{children:"transform"})," and ",(0,r.jsx)(n.code,{children:"filter"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"![[Pasted image 20240513115340.png]]"}),"\n",(0,r.jsx)(n.p,{children:"![[Pasted image 20240513115346.png]]"}),"\n",(0,r.jsx)(n.p,{children:"Exploratory"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"df.info() # Get the total non-null rows, dtypes, column names\ndf.shape # Shape of the dataframe\nlen(df) # Length of the dataframe \ndf.columns # Column names\ndf.dtypes # Get the dtype of the columns\ndf.describe() # Get descriptive statistics of the columns\ndf.value_counts() # Get number of count per value\n"})}),"\n",(0,r.jsx)(n.p,{children:"Format conversion"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"df['hour'] = df['hour'].astype('int64')\n"})}),"\n",(0,r.jsx)(n.p,{children:"NULL filter"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"df.loc[df['column_name'].isnull()]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Flatten multiindex and rename with underscore"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'df.columns = ["_".join(a) for a in df.columns.to_flat_index()]\n'})}),"\n",(0,r.jsx)(n.p,{children:"Dates"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"df.date_col.dt.to_period('M').dt.to_timestamp() # Convert to the month\n"})}),"\n",(0,r.jsx)(n.p,{children:"Resample"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"df = pd.DataFrame(index=pd.date_rage('1/1/2000', periods=10, freq='min'), data=range(10))\n\n# Downsample \ndf.resample('2min').sum()\n\n# Upsample\ndf.resample('30s').ffill()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Subtotals"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'df = pd.pivot_table(\n df,\n values=["values_to_agg"],\n index=["index_col"],\n columns=["columns"],\n aggfunc=np.mean,\n margins=True\n).stack("columns")\n'})}),"\n",(0,r.jsx)(n.p,{children:"Proportion"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"df['weight'] / df.groupby([\"event_dt\"])['weight'].transform('sum')\n"})}),"\n",(0,r.jsx)(n.p,{children:"Apply count to all rows"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'df["count"] = df.groupby("groupby_var")[["value_var"]].transform("count")\n'})}),"\n",(0,r.jsx)(n.p,{children:"Left anti-join"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'df_left = df_left.merge(df_right, on=["keys"], how="outer", indicator=True)\ndf_left = df_left.loc[df_left["_merge"] == "left_only"]\ndf_left = df_left.drop(columns="_merge")\n'})}),"\n",(0,r.jsx)(n.p,{children:"lambda"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Apply to all columns\ndf = df.assign(NewCol=lambda x: x['colA'] * x['colB'])\n\n# Apply to all rows\ndf = df.apply(lambda x: func(x), axis=1)\n# Apply to somme rows\ndf = df.apply(lambda x: func(x) if x.name in ['a', 'b'] else x, axis=1)\n"})}),"\n",(0,r.jsx)(n.h1,{id:"python-data-science",children:"Python Data Science"}),"\n",(0,r.jsx)(n.h2,{id:"useful-decorators",children:"Useful decorators"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"@parallel"})," to quickly implement parallelization on any function"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from joblib import Parallel\nfrom os import cpu_count\nfrom typing import Callable\n\ndef parallel(func=None, args=(), merge_func=lambda x:x, parallelism=cpu_count()):\n def decorator(func: Callable):\n  def inner(*args, **kwargs):\n   results = Parallel(n_jobs=parallelism)(delayed(func)(*args, **kwargs) for i in range(parallelism))\n   return merge_func(results)\n  return inner\n if func is None:\n  # decorator was used like @parallel(...)\n  return decorator\n else:\n  # decorator was used like @parallel\n  return decorator(func)\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"@redirect"})," to add line numbers to the printout"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from contextlib import redirect_stdout\nfrom io import StringIO\nfrom math import floor, log\nfrom typing import Callable\n\ndef redirect(func=None, line_print: Callable=None):\n def decorator(func: Callable):\n  def inner(*args, **kwargs):\n   with StringIO() as buf, redirect_stdout(buf):\n    func(*args, **kwargs)\n    output = buf.getvalue()\n   lines = output.splitlines()\n   if line_print is not None:\n    for line in lines:\n     line_print(line)\n   else:\n    width = floor(log(len(lines), 10)) + 1\n    for i, line in enumerate(lines):\n     i += 1\n     print(f'{i:0{width}}: {line}')\n  return inner\n if func is None:\n  # decorator was used like @redirect(...)\n  return decorator\n else:\n  # decorator was used like @redirect\n  return decorator(func)\n"})}),"\n",(0,r.jsx)(n.h1,{id:"jupyter",children:"Jupyter"}),"\n",(0,r.jsx)(n.p,{children:"Show more rows"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"pd.set_option('display.max_rows', 500)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Format display"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"pd.options.display.float_format = '{:,.2f}'.format\n"})}),"\n",(0,r.jsx)(n.h1,{id:"plotting",children:"Plotting"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def legend_without_duplicate_labels(ax):\n    handles, labels = ax.get_legend_handles_labels()\n    unique = [(h, l) for i, (h, l) in enumerate(zip(handles, labels)) if l not in labels[:i]]\n    ax.legend(*zip(*unique))\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'color_map = plt.get_smap("viridis")\nnorm = plt.Normalize(0, 20)\nplt.plot(df, color=color_map(norm(value)))\nscalarmappaple = plt.cm.ScalarMappable(norm=norm, cmap=plt.cm.viridis)\nplt.colorbar(scalarmappaple, oreientation="horizontal")\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"ax.set_xticklabels(ax.get_xticklabels(), rotation=30)\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Try using the legend='full' parameter for seaborn.lineplot()\n"})}),"\n",(0,r.jsx)(n.h1,{id:"scikit",children:"Scikit"}),"\n",(0,r.jsx)(n.p,{children:"Creating a valid estimator"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Init variables much be of a data type which evaluates as equal when compared with another copy of itself"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"pass the string of the estimator and use a method to resolve the name"}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Fit method needs to return the estimator itself for chaining"}),"\n",(0,r.jsxs)(n.li,{children:["Attribute ",(0,r.jsx)(n.code,{children:"self.is_fitted_"})," is set by ",(0,r.jsx)(n.code,{children:".fit()"})," method and checked by ",(0,r.jsx)(n.code,{children:".predict()"})]}),"\n",(0,r.jsxs)(n.li,{children:["Input is validated with ",(0,r.jsx)(n.code,{children:"check_array()"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Disable warnings from scikit"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"  \ndef warn(*args, **kwargs):\n\tpass\nimport warnings\nwarnings.warn = warn\n"})}),"\n",(0,r.jsx)(n.h1,{id:"pyspark",children:"Pyspark"}),"\n",(0,r.jsx)(n.p,{children:"Sometimes switching between corporate IP will result in a bad port to fix it:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"export SPARK_LOCAL_IP=127.0.0.1\n"})}),"\n",(0,r.jsx)(n.p,{children:"hive partition -> individual files"}),"\n",(0,r.jsx)(n.p,{children:"Spark has optimal file sizes and depending on how writing is done, multiple files representing 1 partition can be written by multiple executors, or 1 single file representing 1 partition can be written"})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>a});var r=t(67294);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);