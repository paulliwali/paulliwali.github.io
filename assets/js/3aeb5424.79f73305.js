"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[33911],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,y=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(y,i(i({ref:t},p),{},{components:n})):r.createElement(y,i({ref:t},p))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},72361:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={},i=void 0,s={unversionedId:"daily-notes/2021/2021-05-20",id:"daily-notes/2021/2021-05-20",title:"2021-05-20",description:"- Daily Log:",source:"@site/docs/daily-notes/2021/2021-05-20.md",sourceDirName:"daily-notes/2021",slug:"/daily-notes/2021/2021-05-20",permalink:"/docs/daily-notes/2021/2021-05-20",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/daily-notes/2021/2021-05-20.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"2021-05-19",permalink:"/docs/daily-notes/2021/2021-05-19"},next:{title:"2021-05-21",permalink:"/docs/daily-notes/2021/2021-05-21"}},l={},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Daily Log:",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"- [[How to Handle Exceptions]]\n    - **Metadata:**\n        - #article #programming #python\n    - A typical flow may require several services and anyone of the services can break and interrupt the flow\n    - Instead of writing a pattern that is repeated try-except with every service like creating a class and creating a function that logs all the different errors\n        - Which is hard to maintain and is focused on writing the errors\n    - **Make exceptions specific**\n        - raise specific errors instead of raising generic exception\n        - ```python\n")),'try:\norder_status = status_service.get_order_status(order_id)\nexcept Exception as e:\nlogger.exception("...{e}...")\nraise e```',(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"        - ```python\n")),'try:\norder_status = status_service.get_order_status(order_id)\nexcept Exception as e:\nlogger.exception("...{e}...")\nraise OrderNotFound(order_id) from e```',(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"    - **Mind your own business**\n        - Don't teach classes what can go wrong, instead have multiple classes to handle each thing and then use a single try...except... block\n        - Don't have to re-raise errors, just use raise\n        - ```python\n")),"class OrderService:\ndef emit(self, order_id: str) -> dict:\ntry:\npass\nexcept:\npass",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"if:\n  pass\nelse:\n  pass\n\ntry:\n  pass\nexcept:\n  pass```\n        - ```python\n")),"class StatusService:\ndef get_order_status(order_id):\ntry:\npass\nexcept:\nraise CustomError() from e\n")),(0,a.kt)("p",null,"class ReceiptService:\ndef create(order_id):\ntry:\npass\nexcept:\nraise ReceiptGenerationFailed() from e"),(0,a.kt)("p",null,"class OrderService:\ndef emit(self, order_id: str) -> dict:\ntry:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"  # all the services in here\n except OrderNotFound as e:\n  # handle this\n except ReceiptGenerationFailed as e:\n  # handle this```\n    - **Better logging**\n        - Tell don't ask\n        - logging exceptions shouldn't need to pass the exception because it is already implicit\n        - Let the downstream exception class to log the exact message\n    - Catching and raising exceptions effectively\n        - Instead of catching and re-raising, according to PEP3134 it is enough to just plainly raise or raising from another exception\n    - Logging exceptions effectively\n        - Don't log the exception object, use logging.exception function to handle the stack trace\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Retrospective::",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"One week ago: [","[May 13th, 2021]","]"),(0,a.kt)("li",{parentName:"ul"},"One month ago: [","[April 20th, 2021]","]"),(0,a.kt)("li",{parentName:"ul"},"One quarter ago: [","[February 20th, 2021]","]"),(0,a.kt)("li",{parentName:"ul"},"One year ago: [","[May 20th, 2020]","]"))),(0,a.kt)("li",{parentName:"ul"},"Daily Stoic::",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"When it comes to learning focus on quality over quantity, you will never read all the literature available in the world but you can benefit from reading from a few"))),(0,a.kt)("li",{parentName:"ul"},"[","[Tasks]","]",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"{{query: {and: [","[TODO]","] {not: {or: [","[query]","] [","[Overdue Tasks]","]}} {between: [","[today]","] [","[today]","]}}}}"))),(0,a.kt)("li",{parentName:"ul"},"[","[Overdue Tasks]","]",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"{{query: {and: [","[TODO]","] {not: {or: [","[query]","]}} {between: [","[yesterday]","] [","[last month]","]}}}}"))),(0,a.kt)("li",{parentName:"ul"},"[","[Upcoming Tasks]","]",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"{{query: {and: [","[TODO]","] {not: {or: [","[query]","] [","[archive]","] [","[Tasks]","] [","[Future Tasks]","]}} {between: [","[tomorrow]","] [","[next month]","]}}}}"))),(0,a.kt)("li",{parentName:"ul"},"[","[Future Tasks]","]",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"{{query: {and: [","[TODO]","] [","[future]","] {not: {or: [","[query]","]}}}}}"))),(0,a.kt)("li",{parentName:"ul"},"[","[roam/comments]","]",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"- [[May 20th, 2021]]\n    - ```python\n")),'try:\norder_status = status_service.get_order_status(order_id)\nexcept Exception as e:\nlogger.exception("...{e}...")\nraise e```',(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"        - \n    - Retrospective::\n        -\n")))))}u.isMDXComponent=!0}}]);