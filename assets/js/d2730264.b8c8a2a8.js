"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[88786],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||l;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:r,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4055:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const l={},o="Python Data Science",i={unversionedId:"code/py-data-science",id:"code/py-data-science",title:"Python Data Science",description:"Useful decorators",source:"@site/docs/code/py-data-science.md",sourceDirName:"code",slug:"/code/py-data-science",permalink:"/docs/code/py-data-science",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/code/py-data-science.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Python Basics",permalink:"/docs/code/py-basic"},next:{title:"SQL Snippets",permalink:"/docs/code/sql-snippets"}},p={},s=[{value:"Useful decorators",id:"useful-decorators",level:2},{value:"Jupyter",id:"jupyter",level:3},{value:"Pandas",id:"pandas",level:2},{value:"Plotting",id:"plotting",level:2},{value:"Scikit",id:"scikit",level:2},{value:"Pyspark",id:"pyspark",level:2}],c={toc:s};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"python-data-science"},"Python Data Science"),(0,r.kt)("h2",{id:"useful-decorators"},"Useful decorators"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@parallel")," to quickly implement parallelization on any function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from joblib import Parallel\nfrom os import cpu_count\nfrom typing import Callable\n\ndef parallel(func=None, args=(), merge_func=lambda x:x, parallelism=cpu_count()):\n def decorator(func: Callable):\n  def inner(*args, **kwargs):\n   results = Parallel(n_jobs=parallelism)(delayed(func)(*args, **kwargs) for i in range(parallelism))\n   return merge_func(results)\n  return inner\n if func is None:\n  # decorator was used like @parallel(...)\n  return decorator\n else:\n  # decorator was used like @parallel\n  return decorator(func)\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@redirect")," to add line numbers to the printout"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from contextlib import redirect_stdout\nfrom io import StringIO\nfrom math import floor, log\nfrom typing import Callable\n\ndef redirect(func=None, line_print: Callable=None):\n def decorator(func: Callable):\n  def inner(*args, **kwargs):\n   with StringIO() as buf, redirect_stdout(buf):\n    func(*args, **kwargs)\n    output = buf.getvalue()\n   lines = output.splitlines()\n   if line_print is not None:\n    for line in lines:\n     line_print(line)\n   else:\n    width = floor(log(len(lines), 10)) + 1\n    for i, line in enumerate(lines):\n     i += 1\n     print(f'{i:0{width}}: {line}')\n  return inner\n if func is None:\n  # decorator was used like @redirect(...)\n  return decorator\n else:\n  # decorator was used like @redirect\n  return decorator(func)\n")),(0,r.kt)("h3",{id:"jupyter"},"Jupyter"),(0,r.kt)("p",null,"Show more rows"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"pd.set_option('display.max_rows', 500)\n")),(0,r.kt)("p",null,"Format display"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"pd.options.display.float_format = '{:,.2f}'.format\n")),(0,r.kt)("h2",{id:"pandas"},"Pandas"),(0,r.kt)("p",null,"Flatten multiindex and rename with underscore"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'df.columns = ["_".join(a) for a in df.columns.to_flat_index()]\n')),(0,r.kt)("p",null,"Dates"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df.date_col.dt.to_period('M').dt.to_timestamp()\n")),(0,r.kt)("p",null,"Subtotals"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'df = pd.pivot_table(\n df,\n values=["values_to_agg"],\n index=["index_col"],\n columns=["columns"],\n aggfunc=np.mean,\n margins=True\n).stack("columns")\n')),(0,r.kt)("p",null,"Proportion"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df['weight'] / df.groupby([\"event_dt\"])['weight'].transform('sum')\n")),(0,r.kt)("p",null,"Apply count to all rows"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'df["count"] = df.groupby("groupby_var")[["value_var"]].transform("count")\n')),(0,r.kt)("p",null,"Left anti-join"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'df_left = df_left.merge(df_right, on=["keys"], how="outer", indicator=True)\ndf_left = df_left.loc[df_left["_merge"] == "left_only"]\ndf_left = df_left.drop(columns="_merge")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df2 = df.piovt()\ndf2.columns = df.columns.to_series().str.join('_')\ndf2.reset_index\n")),(0,r.kt)("h2",{id:"plotting"},"Plotting"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def legend_without_duplicate_labels(ax):\n    handles, labels = ax.get_legend_handles_labels()\n    unique = [(h, l) for i, (h, l) in enumerate(zip(handles, labels)) if l not in labels[:i]]\n    ax.legend(*zip(*unique))\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'color_map = plt.get_smap("viridis")\nnorm = plt.Normalize(0, 20)\nplt.plot(df, color=color_map(norm(value)))\nscalarmappaple = plt.cm.ScalarMappable(norm=norm, cmap=plt.cm.viridis)\nplt.colorbar(scalarmappaple, oreientation="horizontal")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"ax.set_xticklabels(ax.get_xticklabels(), rotation=30)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"Try using the legend='full' parameter for seaborn.lineplot()\n")),(0,r.kt)("h2",{id:"scikit"},"Scikit"),(0,r.kt)("p",null,"Creating a valid estimator"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Init variables much be of a data type which evaluates as equal when compared with another copy of itself")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"pass the string of the estimator and use a method to resolve the name")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Fit method needs to return the estimator itself for chaining"),(0,r.kt)("li",{parentName:"ol"},"Attribute ",(0,r.kt)("inlineCode",{parentName:"li"},"self.is_fitted_")," is set by ",(0,r.kt)("inlineCode",{parentName:"li"},".fit()")," method and checked by ",(0,r.kt)("inlineCode",{parentName:"li"},".predict()")),(0,r.kt)("li",{parentName:"ol"},"Input is validated with ",(0,r.kt)("inlineCode",{parentName:"li"},"check_array()"))),(0,r.kt)("p",null,"Disable warnings from scikit"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"  \ndef warn(*args, **kwargs):\n    pass\nimport warnings\nwarnings.warn = warn\n")),(0,r.kt)("h2",{id:"pyspark"},"Pyspark"),(0,r.kt)("p",null,"Sometimes switching between corporate IP will result in a bad port to fix it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export SPARK_LOCAL_IP=127.0.0.1\n")),(0,r.kt)("p",null,"hive partition -> individual files"),(0,r.kt)("p",null,"Spark has optimal file sizes and depending on how writing is done, multiple files representing 1 partition can be written by multiple executors, or 1 single file representing 1 partition can be written"))}u.isMDXComponent=!0}}]);