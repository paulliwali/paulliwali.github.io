"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[88786],{96587:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var l=r(85893),t=r(11151);const a={},i="Python Data Science",s={id:"code/py-data-science",title:"Python Data Science",description:"Useful decorators",source:"@site/docs/code/py-data-science.md",sourceDirName:"code",slug:"/code/py-data-science",permalink:"/docs/code/py-data-science",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/code/py-data-science.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Python Basics",permalink:"/docs/code/py-basic"},next:{title:"SQL Snippets",permalink:"/docs/code/sql-snippets"}},o={},c=[{value:"Useful decorators",id:"useful-decorators",level:2},{value:"Jupyter",id:"jupyter",level:3},{value:"Pandas",id:"pandas",level:2},{value:"Plotting",id:"plotting",level:2},{value:"Scikit",id:"scikit",level:2},{value:"Pyspark",id:"pyspark",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h1,{id:"python-data-science",children:"Python Data Science"}),"\n",(0,l.jsx)(n.h2,{id:"useful-decorators",children:"Useful decorators"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"@parallel"})," to quickly implement parallelization on any function"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from joblib import Parallel\nfrom os import cpu_count\nfrom typing import Callable\n\ndef parallel(func=None, args=(), merge_func=lambda x:x, parallelism=cpu_count()):\n def decorator(func: Callable):\n  def inner(*args, **kwargs):\n   results = Parallel(n_jobs=parallelism)(delayed(func)(*args, **kwargs) for i in range(parallelism))\n   return merge_func(results)\n  return inner\n if func is None:\n  # decorator was used like @parallel(...)\n  return decorator\n else:\n  # decorator was used like @parallel\n  return decorator(func)\n"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"@redirect"})," to add line numbers to the printout"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from contextlib import redirect_stdout\nfrom io import StringIO\nfrom math import floor, log\nfrom typing import Callable\n\ndef redirect(func=None, line_print: Callable=None):\n def decorator(func: Callable):\n  def inner(*args, **kwargs):\n   with StringIO() as buf, redirect_stdout(buf):\n    func(*args, **kwargs)\n    output = buf.getvalue()\n   lines = output.splitlines()\n   if line_print is not None:\n    for line in lines:\n     line_print(line)\n   else:\n    width = floor(log(len(lines), 10)) + 1\n    for i, line in enumerate(lines):\n     i += 1\n     print(f'{i:0{width}}: {line}')\n  return inner\n if func is None:\n  # decorator was used like @redirect(...)\n  return decorator\n else:\n  # decorator was used like @redirect\n  return decorator(func)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"jupyter",children:"Jupyter"}),"\n",(0,l.jsx)(n.p,{children:"Show more rows"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"pd.set_option('display.max_rows', 500)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Format display"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"pd.options.display.float_format = '{:,.2f}'.format\n"})}),"\n",(0,l.jsx)(n.h2,{id:"pandas",children:"Pandas"}),"\n",(0,l.jsx)(n.p,{children:"Flatten multiindex and rename with underscore"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'df.columns = ["_".join(a) for a in df.columns.to_flat_index()]\n'})}),"\n",(0,l.jsx)(n.p,{children:"Dates"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"df.date_col.dt.to_period('M').dt.to_timestamp()\n"})}),"\n",(0,l.jsx)(n.p,{children:"Subtotals"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'df = pd.pivot_table(\n df,\n values=["values_to_agg"],\n index=["index_col"],\n columns=["columns"],\n aggfunc=np.mean,\n margins=True\n).stack("columns")\n'})}),"\n",(0,l.jsx)(n.p,{children:"Proportion"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"df['weight'] / df.groupby([\"event_dt\"])['weight'].transform('sum')\n"})}),"\n",(0,l.jsx)(n.p,{children:"Apply count to all rows"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'df["count"] = df.groupby("groupby_var")[["value_var"]].transform("count")\n'})}),"\n",(0,l.jsx)(n.p,{children:"Left anti-join"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'df_left = df_left.merge(df_right, on=["keys"], how="outer", indicator=True)\ndf_left = df_left.loc[df_left["_merge"] == "left_only"]\ndf_left = df_left.drop(columns="_merge")\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"df2 = df.piovt()\ndf2.columns = df.columns.to_series().str.join('_')\ndf2.reset_index\n"})}),"\n",(0,l.jsx)(n.h2,{id:"plotting",children:"Plotting"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def legend_without_duplicate_labels(ax):\n    handles, labels = ax.get_legend_handles_labels()\n    unique = [(h, l) for i, (h, l) in enumerate(zip(handles, labels)) if l not in labels[:i]]\n    ax.legend(*zip(*unique))\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'color_map = plt.get_smap("viridis")\nnorm = plt.Normalize(0, 20)\nplt.plot(df, color=color_map(norm(value)))\nscalarmappaple = plt.cm.ScalarMappable(norm=norm, cmap=plt.cm.viridis)\nplt.colorbar(scalarmappaple, oreientation="horizontal")\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"ax.set_xticklabels(ax.get_xticklabels(), rotation=30)\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Try using the legend='full' parameter for seaborn.lineplot()\n"})}),"\n",(0,l.jsx)(n.h2,{id:"scikit",children:"Scikit"}),"\n",(0,l.jsx)(n.p,{children:"Creating a valid estimator"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"Init variables much be of a data type which evaluates as equal when compared with another copy of itself"}),"\n"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"pass the string of the estimator and use a method to resolve the name"}),"\n"]}),"\n",(0,l.jsxs)(n.ol,{start:"2",children:["\n",(0,l.jsx)(n.li,{children:"Fit method needs to return the estimator itself for chaining"}),"\n",(0,l.jsxs)(n.li,{children:["Attribute ",(0,l.jsx)(n.code,{children:"self.is_fitted_"})," is set by ",(0,l.jsx)(n.code,{children:".fit()"})," method and checked by ",(0,l.jsx)(n.code,{children:".predict()"})]}),"\n",(0,l.jsxs)(n.li,{children:["Input is validated with ",(0,l.jsx)(n.code,{children:"check_array()"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Disable warnings from scikit"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"  \ndef warn(*args, **kwargs):\n\tpass\nimport warnings\nwarnings.warn = warn\n"})}),"\n",(0,l.jsx)(n.h2,{id:"pyspark",children:"Pyspark"}),"\n",(0,l.jsx)(n.p,{children:"Sometimes switching between corporate IP will result in a bad port to fix it:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"export SPARK_LOCAL_IP=127.0.0.1\n"})}),"\n",(0,l.jsx)(n.p,{children:"hive partition -> individual files"}),"\n",(0,l.jsx)(n.p,{children:"Spark has optimal file sizes and depending on how writing is done, multiple files representing 1 partition can be written by multiple executors, or 1 single file representing 1 partition can be written"})]})}function p(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>s,a:()=>i});var l=r(67294);const t={},a=l.createContext(t);function i(e){const n=l.useContext(a);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),l.createElement(a.Provider,{value:n},e.children)}}}]);