"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[75609],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>c});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var p=n.createContext({}),m=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},k="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},N=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),k=m(a),N=l,c=k["".concat(p,".").concat(N)]||k[N]||s[N]||r;return a?n.createElement(c,i(i({ref:t},u),{},{components:a})):n.createElement(c,i({ref:t},u))}));function c(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=N;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[k]="string"==typeof e?e:l,i[1]=o;for(var m=2;m<r;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}N.displayName="MDXCreateElement"},65418:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>k,frontMatter:()=>r,metadata:()=>o,toc:()=>m});var n=a(87462),l=(a(67294),a(3905));const r={},i=void 0,o={unversionedId:"roam/SQL Crash Course",id:"roam/SQL Crash Course",title:"SQL Crash Course",description:"- Metadata",source:"@site/docs/roam/SQL Crash Course.md",sourceDirName:"roam",slug:"/roam/SQL Crash Course",permalink:"/docs/roam/SQL Crash Course",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/roam/SQL Crash Course.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Roam Research",permalink:"/docs/roam/Roam Research"},next:{title:"Scikit-Learn",permalink:"/docs/roam/Scikit-Learn"}},p={},m=[],u={toc:m};function k(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Metadata"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Source: ",(0,l.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=HXV3zeQKqGY"},"https://www.youtube.com/watch?v=HXV3zeQKqGY")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h2",{parentName:"li",id:"introduction-to-database"},"Introduction to database")),(0,l.kt)("li",{parentName:"ul"},"A database management system (DBMS) is used to manage databases",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Including MS SQL, MYSQL, PostgreSQL (object oriented), Oracle, SQLite"),(0,l.kt)("li",{parentName:"ul"},"Perform CRUD"))),(0,l.kt)("li",{parentName:"ul"},"Two main types of databases are ",(0,l.kt)("strong",{parentName:"li"},"relational (SQL) and non-relational (noSQL)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Relational DB organizes data in tables"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Non-relational DB organizes data into key-value pairs, json, XML, graphs, or flexible tables"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Relational DBMS include mySQL, Oracle, postgreSQL"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Uses ",(0,l.kt)("strong",{parentName:"li"},"****"),"structured query language (SQL)",(0,l.kt)("strong",{parentName:"li"},"****")," to interact"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"SQL code is not always portable to another RDBMS"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Non-relational DBMS include mongoDB, apache cassandra, firebase"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"No set language to interact with all NRDBMS because they are implemented differently"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"#**")," Tables and Keys**"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Tables should have"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Column(s) which defines a property"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Row(s) which defines an entry"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"****"),"Primary key",(0,l.kt)("strong",{parentName:"li"},"****")," which uniquely defines the rows of the database, see ",(0,l.kt)("strong",{parentName:"li"},"****"),"index",(0,l.kt)("strong",{parentName:"li"},"****")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"- A ********surrogate key******** is not mapped to anything\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"- A ********natural key******** is mapped to some real world meaning\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"- A ********foreign key******** is mapped to another table's primary key in the DB\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"- A ********composite key******** is comprised of multiple columns when used in conjunction uniquely identifies the row\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"#**")," SQL Basics**"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"SQL implementation is different across different RDBMS but shares the core concepts"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"A hybrid language that combines data query language (DQL), data definition language (DDL), data control language (DCL), data manipulation language (DML)"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"DQL is used to query for information"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"- To get the __*____exact____*__ information that you want and __*____nothing more____*__\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"DDL is used to define schemas"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"DCL is used to control access and manage security"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"DML is used to for C(R)UD operations"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Syntax convention to write SQL keywords in all caps"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"##**")," Create Tables**"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"First thing is to define a schema"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"INT")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DECIMAL(M,N)"),": M total digits, N digits after decimal"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"VARCHAR(l)"),": String of text with l length"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"BLOB:")," binary large objects"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DATE"),": 'YYYY-MM-DD'"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"TIMESTAMP"),": 'YYYY-MM-DD HH:MM:SS'"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Columns can have ",(0,l.kt)("strong",{parentName:"li"},"****"),"constraints",(0,l.kt)("strong",{parentName:"li"},"****")," to help with incomplete information"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If column should be ",(0,l.kt)("inlineCode",{parentName:"li"},"NULL")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"NOT NULL")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If column should be ",(0,l.kt)("inlineCode",{parentName:"li"},"UNIQUE")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"DEFAULT")," value if nothing is entered"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Primary key can be ",(0,l.kt)("inlineCode",{parentName:"li"},"AUTO_INCREMENT")," which is useful for integer primary keys"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"FOREIGN KEY")," to add the foreign key"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"To add values in foreign key columns, they have to already exist in order to be referenced"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ON DELETE SET NULL")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"ON DELETE SET CASCADE")," to take care of what happens to foreign keys"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"##**")," Updating and Deleting Tables**"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"UPDATE"),"... ",(0,l.kt)("inlineCode",{parentName:"li"},"SET"),"... ",(0,l.kt)("inlineCode",{parentName:"li"},"WHERE"),"..."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Update column(s) of specific row(s) that pass the condition(s)"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DELETE FROM"),"... ",(0,l.kt)("inlineCode",{parentName:"li"},"WHERE"),"..."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Delete row(s) that pass the condition(s)"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"##**")," Queries**"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"SELECT"),"... ",(0,l.kt)("inlineCode",{parentName:"li"},"FROM"),"..."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"to retrieve the columns"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"LIMIT")," is used to filter the number of rows that is returned"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"WHERE")," is used to construct filters"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Can get complex using boolean comparisons: ",(0,l.kt)("inlineCode",{parentName:"li"},"<, >, <=, >=, =, <>, AND, OR")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"IN")," is used to make 1-to-many comparisons"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Wildcards include ",(0,l.kt)("inlineCode",{parentName:"li"},"%")," for any number of characters and ",(0,l.kt)("inlineCode",{parentName:"li"},"_")," for one character"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"##**")," Operations**"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"UNION")," combines rows from tables"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"They have to have the same data type and dimensions"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"JOIN")," combines columns from tables"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"They have to share key columns"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"##**")," ER Diagrams**"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"****"),"Entity",(0,l.kt)("strong",{parentName:"li"},"****")," is an object to model about"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"****"),"Weak entity",(0,l.kt)("strong",{parentName:"li"},"****")," is an entity that can't be uniquely identified by its attributes, will depend on another entity - ",(0,l.kt)("strong",{parentName:"li"},"*__"),"thus full participation on the entity_",(0,l.kt)("strong",{parentName:"li"},"_*")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"****"),"Attributes",(0,l.kt)("strong",{parentName:"li"},"****")," info about the entry"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"****"),"Composite attributes",(0,l.kt)("strong",{parentName:"li"},"****")," can be broken into sub-attributes"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"****"),"Multi-valued attributes",(0,l.kt)("strong",{parentName:"li"},"****")," can have more than one value (double outline)"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"****"),"Derived attributes",(0,l.kt)("strong",{parentName:"li"},"****"),' are "calculated" from other attributes (dashed outline)'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"****"),"Relationships",(0,l.kt)("strong",{parentName:"li"},"****")," defines a connection between two entities"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"****"),"Relationship attribute",(0,l.kt)("strong",{parentName:"li"},"****")," are defined only on the relationship"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"****"),"Relationship cardinality",(0,l.kt)("strong",{parentName:"li"},"****")," are 1-to-1, 1-to-many, many-to-many"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Converting ER diagrams to schema:"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},"Map regular entity types to tables with entities as columns"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ol",{parentName:"li",start:2},(0,l.kt)("li",{parentName:"ol"},"Map weak entity types with composite key of primary key of owner and itself"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ol",{parentName:"li",start:3},(0,l.kt)("li",{parentName:"ol"},"Map binary 1-to-1 relationships by including one side of the relationship's primary key as foreign keys in favor of total participation"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ol",{parentName:"li",start:4},(0,l.kt)("li",{parentName:"ol"},'Map binary 1-to-many relationships by including one side of the relationship\'s primary key as foreign keys on the "many" side'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ol",{parentName:"li",start:5},(0,l.kt)("li",{parentName:"ol"},"Map binary many-to-many relationships by creating a new table with composite key with primary key of both sides and any attributes")))))}k.isMDXComponent=!0}}]);