"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[42656],{8450:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"slip-box/reference-notes/ETL Principles","title":"ETL Principles","description":"Best practices usually start to make sense when the team gets large and there are multiple data sources, calculation processes and users. It prevents the urge to make ad-hoc changes in order to \'solve it quickly to get it going\' that eventually will tangle everything.","source":"@site/docs/slip-box/reference-notes/ETL Principles.md","sourceDirName":"slip-box/reference-notes","slug":"/slip-box/reference-notes/ETL Principles","permalink":"/docs/slip-box/reference-notes/ETL Principles","draft":false,"unlisted":false,"editUrl":"https://github.com/paulliwali/paulliwali.github.io/tree/main/docs/docs/slip-box/reference-notes/ETL Principles.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"EMME tips and tricks","permalink":"/docs/slip-box/reference-notes/EMME tips and tricks"},"next":{"title":"Eight Factors of Productivity","permalink":"/docs/slip-box/reference-notes/Eight Factors of Productivity"}}');var i=t(74848),r=t(28453);const o={},l=void 0,a={},c=[];function d(e){const n={li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Best practices usually start to make sense when the team gets large and there are multiple data sources, calculation processes and users. It prevents the urge to make ad-hoc changes in order to 'solve it quickly to get it going' that eventually will tangle everything."}),"\n",(0,i.jsx)(n.p,{children:"Load Data Incrementally"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Extract data incrementally at regular intervals"}),"\n",(0,i.jsx)(n.li,{children:"Airflow makes this process easy by scheduling jobs to follow a time cadence"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Process Historic Data"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Ad-hoc workarounds are usually needed to retrieve older data for a new workflow"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Partition Ingested Data"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Partitioned data at ingestion allows for parallel DAG runs that won't get into a write lock"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Enforce the Idempotency Constraint"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Runs with the same parameters should have the same outcome on different days"}),"\n",(0,i.jsx)(n.li,{children:"Sometimes the processes will change and the outcome can change"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Enforce Deterministic Properties"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"For a set of given input the output is always the same, cases where the function can be non-deterministic\n**Using external state within the function\n** Operating in time-sensitive ways\n**Relying on order of input variable\n** Implementation issues inside the function (relying on dictionary order)\n**Improper exception handling and post-exception behavior\n** Intermediate commits and unexpected conditions"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Execute Conditionally"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Option to control tasks to run after the success of other tasks"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Code Workflow as well as the Applications"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Able to control both the workflow as well as the underlying application"}),"\n",(0,i.jsx)(n.li,{children:"Dynamically control DAGs within another DAG"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Reset Data Between Tasks"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"What might seem like inefficient is actually intended to not allow the reading of temporary files"}),"\n",(0,i.jsx)(n.li,{children:"Task instances of the same DAG gets executed on different workers and they don't read from the temporary data"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Understand SLA's and Alerts"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"SLA can be used to detect long running tasks"}),"\n",(0,i.jsx)(n.li,{children:"Airflow sends email to notify missed SLA's"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(96540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);