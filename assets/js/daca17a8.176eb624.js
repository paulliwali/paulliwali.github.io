"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8260],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},54801:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const i={},o=void 0,l={unversionedId:"slip-box/reference-notes/Good Coding Practice",id:"slip-box/reference-notes/Good Coding Practice",title:"Good Coding Practice",description:"- DRY Principle",source:"@site/docs/slip-box/reference-notes/Good Coding Practice.md",sourceDirName:"slip-box/reference-notes",slug:"/slip-box/reference-notes/Good Coding Practice",permalink:"/docs/slip-box/reference-notes/Good Coding Practice",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/slip-box/reference-notes/Good Coding Practice.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Get Started with Roam",permalink:"/docs/slip-box/reference-notes/Get Started with Roam"},next:{title:"Google 43 rules of machine learning",permalink:"/docs/slip-box/reference-notes/Google 43 rules of machine learning"}},s={},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"#programming "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"DRY Principle",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Don't repeat yourself and remove duplication wherever possible"))),(0,r.kt)("li",{parentName:"ul"},"SOLID Principles",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Single responsibility principle",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"A class or module should do one thing only"),(0,r.kt)("li",{parentName:"ul"},"This is important because we ",(0,r.kt)("strong",{parentName:"li"},"don't want")," multiple reasons for why the class or module should change"))),(0,r.kt)("li",{parentName:"ul"},"Open/closed principle",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Open for extension",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The class can be inherited or overwritten"))),(0,r.kt)("li",{parentName:"ul"},"Closed for modification",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Should not have switch conditions inside that needs to be changed in order to work"))))),(0,r.kt)("li",{parentName:"ul"},"Liskov substitution principle",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Any child type of a parent type should be able to stand in ",(0,r.kt)("strong",{parentName:"li"},"for")," that parent without things blowing up"),(0,r.kt)("li",{parentName:"ul"},"If you have an ",(0,r.kt)("inlineCode",{parentName:"li"},"animal")," class with ",(0,r.kt)("inlineCode",{parentName:"li"},"make_noise()")," method then any child classes of ",(0,r.kt)("inlineCode",{parentName:"li"},"cats")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"dogs"),", they both should have proper implementations of ",(0,r.kt)("inlineCode",{parentName:"li"},"make_noise()")," and not be throwing an exception "))),(0,r.kt)("li",{parentName:"ul"},"Interface segregation principle",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Should favour many, smaller, client-specific interfaces ",(0,r.kt)("strong",{parentName:"li"},"over")," a single, larger, monolithic interface"),(0,r.kt)("li",{parentName:"ul"},"If you have an interface with lots of configurations that you have to set up with default values then it is not a good practice"))),(0,r.kt)("li",{parentName:"ul"},"Dependency inversion principle",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Write code that depends upon abstractions rather than concrete details"),(0,r.kt)("li",{parentName:"ul"},"Classes that takes in generic variables instead of instantiating a specific value internally"))))),(0,r.kt)("li",{parentName:"ul"},"Law of Demeter",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"An OOP rule that helps to write clean code"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"For all classes C, and for all methods M attached to C, all objects to which M sends a message must be:")))),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"M's argument objects, including the self object or"),(0,r.kt)("li",{parentName:"ul"},"The instance variable objects of C")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"For all classes C, and for all methods M attached to C, all objects to which M sends a message must be:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"self")),(0,r.kt)("li",{parentName:"ul"},"M's argument objects"),(0,r.kt)("li",{parentName:"ul"},"Instance variable objects of C"),(0,r.kt)("li",{parentName:"ul"},"Objects created by M, or by functions or methods which M calls"),(0,r.kt)("li",{parentName:"ul"},"Objects in global variables"))),(0,r.kt)("li",{parentName:"ul"},"This means that this law ",(0,r.kt)("strong",{parentName:"li"},'prohibits "sending a message" to any already existing object that is held in instance variables of ',(0,r.kt)("strong",{parentName:"strong"},"other")," classes, unless it is also held by our class or passed to us as method parameters"))))))}u.isMDXComponent=!0}}]);