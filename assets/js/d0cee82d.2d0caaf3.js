"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[15030],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(n),g=a,b=u["".concat(l,".").concat(g)]||u[g]||m[g]||o;return n?r.createElement(b,i(i({ref:t},p),{},{components:n})):r.createElement(b,i({ref:t},p))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},85041:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const o={},i="Git Basics",c={unversionedId:"code/git-basics",id:"code/git-basics",title:"Git Basics",description:"Clone single branch from repo",source:"@site/docs/code/git-basics.md",sourceDirName:"code",slug:"/code/git-basics",permalink:"/docs/code/git-basics",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/code/git-basics.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"General Coding Principles",permalink:"/docs/code/general"},next:{title:"Github",permalink:"/docs/code/github"}},l={},s=[],p={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"git-basics"},"Git Basics"),(0,a.kt)("p",null,"Clone single branch from repo"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone -b <branch name> --single-branch <repo-url> <folder name>`\n")),(0,a.kt)("p",null,"Fetch another remote branch after a single-branch clone"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git remote set-branches --add origin <remote-branch-name>\ngit fetch origin <remote-branch-name>:<local-branch-name>\n")),(0,a.kt)("p",null,"Squash and interactive rebase (can ",(0,a.kt)("inlineCode",{parentName:"p"},"pick"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"squash")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"reword")," individual commits)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Rebase from current branch\ngit rebase -i HEAD~[number of commits]\n\n# Rebase from a different branch\ngit checkout <main-branch-name>\ngit pull origin\ngit checkout <dev-branch-name>\ngit rebase -i <main-branch-name>\n")),(0,a.kt)("p",null,"Force push to remote branch to overwrite history"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git push origin <branch-name> --force\n")),(0,a.kt)("p",null,"Force pull to local branch overwrite history"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git fetch --all  # update all branches\ngit checkout -b backup-master\ngit reset --hard origin/master\n")),(0,a.kt)("p",null,"Undo commits"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# soft is reversible\ngit reset --soft HEAD~n\n# hard is irreversible\ngit reset --hard HEAD~n\n")),(0,a.kt)("p",null,"Check diff between current and history"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git show HEAD~1\ngit show <COMMIT>\n")),(0,a.kt)("p",null,"Go to a specific commit and be in a detached state"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout -b <new-branch-name> <SHA1>\n")),(0,a.kt)("p",null,"One-liner git log alias to ",(0,a.kt)("inlineCode",{parentName:"p"},"git prettylog")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'git config --global alias.prettylog "log --all --decorate --oneline --graph"\n')))}u.isMDXComponent=!0}}]);