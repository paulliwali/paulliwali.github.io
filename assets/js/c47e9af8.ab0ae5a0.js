"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[29238],{28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var t=i(96540);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}},69679:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"slip-box/reference-notes/Coding Principles","title":"Keys to writing clean functions","description":"- How easy would it be to unit test the function","source":"@site/docs/slip-box/reference-notes/Coding Principles.md","sourceDirName":"slip-box/reference-notes","slug":"/slip-box/reference-notes/Coding Principles","permalink":"/docs/slip-box/reference-notes/Coding Principles","draft":false,"unlisted":false,"editUrl":"https://github.com/paulliwali/paulliwali.github.io/tree/main/docs/docs/slip-box/reference-notes/Coding Principles.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Class balancing","permalink":"/docs/slip-box/reference-notes/Class balancing"},"next":{"title":"Cognitive Bias","permalink":"/docs/slip-box/reference-notes/Cognitive Bias"}}');var s=i(74848),o=i(28453);const r={},l="Keys to writing clean functions",c={},a=[];function d(e){const n={h1:"h1",header:"header",li:"li",ol:"ol",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"keys-to-writing-clean-functions",children:"Keys to writing clean functions"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"How easy would it be to unit test the function"}),"\n",(0,s.jsx)(n.li,{children:"How many lines are in a function, if it greater than 20 lines then it might be doing too many things"}),"\n",(0,s.jsx)(n.li,{children:'What are the logical steps each function is performing, if the description is "do A then B then C", then it can probably be split into 3 functions'}),"\n",(0,s.jsx)(n.li,{children:"Data fetching -> Data processing/transformation -> Data visualization"}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"clean-code-practice",children:"Clean Code Practice"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"DRY Principle"}),"\n",(0,s.jsx)(n.li,{children:"Minimize entities, classes, functions"}),"\n",(0,s.jsx)(n.li,{children:"It should be readable and simple"}),"\n",(0,s.jsx)(n.li,{children:"Be testable"}),"\n",(0,s.jsx)(n.li,{children:"SOLID Principle"}),"\n",(0,s.jsx)(n.li,{children:"Careful with dependencies, should be one directional"}),"\n",(0,s.jsx)(n.li,{children:"Don't hardcode"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);