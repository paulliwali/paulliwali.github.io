"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[10446],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(96540);const s={},o=i.createContext(s);function r(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:t},e.children)}},36626:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"slip-box/reference-notes/Big O Notation","title":"Big O Notation","description":"- Metadata","source":"@site/docs/slip-box/reference-notes/Big O Notation.md","sourceDirName":"slip-box/reference-notes","slug":"/slip-box/reference-notes/Big O Notation","permalink":"/docs/slip-box/reference-notes/Big O Notation","draft":false,"unlisted":false,"editUrl":"https://github.com/paulliwali/paulliwali.github.io/tree/main/docs/docs/slip-box/reference-notes/Big O Notation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Big Data Specialization Degree","permalink":"/docs/slip-box/reference-notes/Big Data Specialization Degree"},"next":{"title":"Bitcoin is battery","permalink":"/docs/slip-box/reference-notes/Bitcoin is battery"}}');var s=n(74848),o=n(28453);const r={},a=void 0,c={},l=[];function u(e){const t={a:"a",li:"li",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Metadata","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Source: ",(0,s.jsx)(t.a,{href:"https://justin.abrah.ms/computer-science/big-o-notation-explained.html",children:"https://justin.abrah.ms/computer-science/big-o-notation-explained.html"})]}),"\n",(0,s.jsx)(t.li,{children:"Tags: #programming"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.li,{children:"Big O is a way to describe the complexity of an algorithm"}),"\n",(0,s.jsx)(t.li,{children:"O(1) is constant time, the worst scenario is always the same no matter the size of input"}),"\n",(0,s.jsx)(t.li,{children:"O(n) is linear time, the worst scenario is the length of the input it passed through"}),"\n",(0,s.jsx)(t.li,{children:"O(n^2) is when the worst scenario increases more as the length of the input increases"}),"\n",(0,s.jsx)(t.li,{children:"For functions with different O() values, take the biggest term"}),"\n"]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);