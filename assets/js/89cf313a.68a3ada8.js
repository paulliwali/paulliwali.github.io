"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[19657],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>c});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(a),k=i,c=u["".concat(s,".").concat(k)]||u[k]||d[k]||r;return a?n.createElement(c,l(l({ref:t},m),{},{components:a})):n.createElement(c,l({ref:t},m))}));function c(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=k;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},65279:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var n=a(87462),i=(a(67294),a(3905));const r={},l=void 0,o={unversionedId:"code/notes",id:"code/notes",title:"notes",description:"- Watching video from freeCodeCamp",source:"@site/docs/code/notes.md",sourceDirName:"code",slug:"/code/notes",permalink:"/docs/code/notes",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/code/notes.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Kubernetes Snippets",permalink:"/docs/code/kube"},next:{title:"Python Basics",permalink:"/docs/code/py-basic"}},s={},p=[{value:"Create Tables",id:"create-tables",level:2},{value:"Updating and Deleting Tables",id:"updating-and-deleting-tables",level:2},{value:"Queries",id:"queries",level:2},{value:"Operations",id:"operations",level:2},{value:"ER Diagrams",id:"er-diagrams",level:2}],m={toc:p};function u(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Watching ",(0,i.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=HXV3zeQKqGY"},"video")," from freeCodeCamp")),(0,i.kt)("h1",{id:"introduction-to-database"},"Introduction to database"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A database management system (DBMS) is used to manage databases",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Including MS SQL, MYSQL, PostgreSQL (object oriented), Oracle, SQLite"),(0,i.kt)("li",{parentName:"ul"},"Perform CRUD"))),(0,i.kt)("li",{parentName:"ul"},"Two main types of databases are ",(0,i.kt)("strong",{parentName:"li"},"relational (SQL) and non-relational (noSQL)"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Relational DB organizes data in tables"),(0,i.kt)("li",{parentName:"ul"},"Non-relational DB organizes data into key-value pairs, json, XML, graphs, or flexible tables"))),(0,i.kt)("li",{parentName:"ul"},"Relational DBMS include mySQL, Oracle, postgreSQL",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Uses ",(0,i.kt)("strong",{parentName:"li"},"structured query language (SQL)")," to interact"),(0,i.kt)("li",{parentName:"ul"},"SQL code is not always portable to another RDBMS"))),(0,i.kt)("li",{parentName:"ul"},"Non-relational DBMS include mongoDB, apache cassandra, firebase",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"No set language to interact with all NRDBMS because they are implemented differently")))),(0,i.kt)("h1",{id:"tables-and-keys"},"Tables and Keys"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Tables should have",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Column(s) which defines a property"),(0,i.kt)("li",{parentName:"ul"},"Row(s) which defines an entry"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Primary key")," which uniquely defines the rows of the database, see ",(0,i.kt)("strong",{parentName:"li"},"index"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("strong",{parentName:"li"},"surrogate key")," is not mapped to anything"),(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("strong",{parentName:"li"},"natural key")," is mapped to some real world meaning"),(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("strong",{parentName:"li"},"foreign key")," is mapped to another table's primary key in the DB"),(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("strong",{parentName:"li"},"composite key")," is comprised of multiple columns when used in conjunction uniquely identifies the row")))))),(0,i.kt)("h1",{id:"sql-basics"},"SQL Basics"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"SQL implementation is different across different RDBMS but shares the core concepts"),(0,i.kt)("li",{parentName:"ul"},"A hybrid language that combines data query language (DQL), data definition language (DDL), data control language (DCL), data manipulation language (DML)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"DQL is used to query for information",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"To get the ",(0,i.kt)("em",{parentName:"li"},"exact")," information that you want and ",(0,i.kt)("em",{parentName:"li"},"nothing more")))),(0,i.kt)("li",{parentName:"ul"},"DDL is used to define schemas"),(0,i.kt)("li",{parentName:"ul"},"DCL is used to control access and manage security"),(0,i.kt)("li",{parentName:"ul"},"DML is used to for C(R)UD operations"))),(0,i.kt)("li",{parentName:"ul"},"Syntax convention to write SQL keywords in all caps")),(0,i.kt)("h2",{id:"create-tables"},"Create Tables"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"First thing is to define a schema",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"INT")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DECIMAL(M,N)"),": M total digits, N digits after decimal"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"VARCHAR(l)"),": String of text with l length"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BLOB:")," binary large objects"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DATE"),": 'YYYY-MM-DD'"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TIMESTAMP"),": 'YYYY-MM-DD HH:MM:SS'"))),(0,i.kt)("li",{parentName:"ul"},"Columns can have ",(0,i.kt)("strong",{parentName:"li"},"constraints")," to help with incomplete information",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If column should be ",(0,i.kt)("inlineCode",{parentName:"li"},"NULL")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"NOT NULL")),(0,i.kt)("li",{parentName:"ul"},"If column should be ",(0,i.kt)("inlineCode",{parentName:"li"},"UNIQUE")),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"DEFAULT")," value if nothing is entered"),(0,i.kt)("li",{parentName:"ul"},"Primary key can be ",(0,i.kt)("inlineCode",{parentName:"li"},"AUTO_INCREMENT")," which is useful for integer primary keys"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"FOREIGN KEY")," to add the foreign key",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"To add values in foreign key columns, they have to already exist in order to be referenced"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ON DELETE SET NULL")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"ON DELETE SET CASCADE")," to take care of what happens to foreign keys")),(0,i.kt)("h2",{id:"updating-and-deleting-tables"},"Updating and Deleting Tables"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"UPDATE"),"... ",(0,i.kt)("inlineCode",{parentName:"li"},"SET"),"... ",(0,i.kt)("inlineCode",{parentName:"li"},"WHERE"),"...",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Update column(s) of specific row(s) that pass the condition(s)"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DELETE FROM"),"... ",(0,i.kt)("inlineCode",{parentName:"li"},"WHERE"),"...",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Delete row(s) that pass the condition(s)")))),(0,i.kt)("h2",{id:"queries"},"Queries"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SELECT"),"... ",(0,i.kt)("inlineCode",{parentName:"li"},"FROM"),"...",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"to retrieve the columns"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"LIMIT")," is used to filter the number of rows that is returned"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"WHERE")," is used to construct filters",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Can get complex using boolean comparisons: ",(0,i.kt)("inlineCode",{parentName:"li"},"<, >, <=, >=, =, <>, AND, OR")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"IN")," is used to make 1-to-many comparisons"))),(0,i.kt)("li",{parentName:"ul"},"Wildcards include ",(0,i.kt)("inlineCode",{parentName:"li"},"%")," for any number of characters and ",(0,i.kt)("inlineCode",{parentName:"li"},"_")," for one character")),(0,i.kt)("h2",{id:"operations"},"Operations"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"UNION")," combines rows from tables",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"They have to have the same data type and dimensions"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"JOIN")," combines columns from tables",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"They have to share key columns")))),(0,i.kt)("h2",{id:"er-diagrams"},"ER Diagrams"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Entity")," is an object to model about",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Weak entity")," is an entity that can't be uniquely identified by its attributes, will depend on another entity - ",(0,i.kt)("em",{parentName:"li"},"thus full participation on the entity")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Attributes")," info about the entry",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Composite attributes")," can be broken into sub-attributes"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Multi-valued attributes")," can have more than one value (double outline)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Derived attributes"),' are "calculated" from other attributes (dashed outline)'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Relationships")," defines a connection between two entities",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Relationship attribute")," are defined only on the relationship"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Relationship cardinality")," are 1-to-1, 1-to-many, many-to-many"))),(0,i.kt)("li",{parentName:"ul"},"Converting ER diagrams to schema:",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Map regular entity types to tables with entities as columns"),(0,i.kt)("li",{parentName:"ol"},"Map weak entity types with composite key of primary key of owner and itself"),(0,i.kt)("li",{parentName:"ol"},"Map binary 1-to-1 relationships by including one side of the relationship's primary key as foreign keys in favor of total participation"),(0,i.kt)("li",{parentName:"ol"},'Map binary 1-to-many relationships by including one side of the relationship\'s primary key as foreign keys on the "many" side'),(0,i.kt)("li",{parentName:"ol"},"Map binary many-to-many relationships by creating a new table with composite key with primary key of both sides and any attributes")))))}u.isMDXComponent=!0}}]);