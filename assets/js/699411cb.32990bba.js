"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[53587],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),d=r,g=p["".concat(s,".").concat(d)]||p[d]||m[d]||i;return n?a.createElement(g,o(o({ref:t},u),{},{components:n})):a.createElement(g,o({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2202:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const i={},o=void 0,l={unversionedId:"slip-box/reference-notes/Functional Data Engineering",id:"slip-box/reference-notes/Functional Data Engineering",title:"Functional Data Engineering",description:"Metadata:",source:"@site/docs/slip-box/reference-notes/Functional Data Engineering.md",sourceDirName:"slip-box/reference-notes",slug:"/slip-box/reference-notes/Functional Data Engineering",permalink:"/docs/slip-box/reference-notes/Functional Data Engineering",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/slip-box/reference-notes/Functional Data Engineering.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Franklin 299",permalink:"/docs/slip-box/reference-notes/Franklin 299"},next:{title:"Gaussian Mixture Models",permalink:"/docs/slip-box/reference-notes/Gaussian Mixture Models"}},s={},c=[],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Metadata:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"- #article #data-science #gospel\n- Source: [Functional Data Engineering](https://maximebeauchemin.medium.com/functional-data-engineering-a-modern-paradigm-for-batch-data-processing-2327ec32c42a)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Modern paradigm for batched data processing"),(0,r.kt)("li",{parentName:"ul"},"ETL (extract, transform and load) is a time-consuming, brittle and often unrewarding process"),(0,r.kt)("li",{parentName:"ul"},"Functional programming paradigm can bring clarity to the process",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"A style of building the structure and elements of computer programs that treats ",(0,r.kt)("strong",{parentName:"li"},"computation as the evaluation of mathematical functions and avoid changing-state and mutable data")),(0,r.kt)("li",{parentName:"ul"},"A declarative programming paradigm, meaning programming is done with expressions or declarations, ",(0,r.kt)("strong",{parentName:"li"},"instead of statements")),(0,r.kt)("li",{parentName:"ul"},"Functional code outputs code that only depend on the arguments that are passed to the function",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Calling the same function twice with the same argument will produce the same result each time")))),(0,r.kt)("li",{parentName:"ul"},"In contrast to ",(0,r.kt)("strong",{parentName:"li"},"procedures that depend on a local or global state")))),(0,r.kt)("li",{parentName:"ul"},"Reproducibility and replicability are the key characteristics we are after",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"In order to do this, we want ",(0,r.kt)("strong",{parentName:"li"},"immutable data along with versioned logic")))),(0,r.kt)("li",{parentName:"ul"},"Write only ",(0,r.kt)("strong",{parentName:"li"},"pure tasks"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"These are deterministic and idempotent"),(0,r.kt)("li",{parentName:"ul"},"No side-effects to things outside the scopes of the task"),(0,r.kt)("li",{parentName:"ul"},"When tasks inevitably fail, they can be re-run without any concerns of double-counting or overwriting unintentionally"),(0,r.kt)("li",{parentName:"ul"},"Instead of returning something like a pure-function - it ",(0,r.kt)("strong",{parentName:"li"},"overwrites a partition of the data")," which is akin to the immutable object that a typical pure function would return"),(0,r.kt)("li",{parentName:"ul"},"Should only target a single output"))),(0,r.kt)("li",{parentName:"ul"},"Table partitions as immutable objects",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Don't use DML operations like UPDATE, APPEND, DELETE"),(0,r.kt)("li",{parentName:"ul"},"A pure task should fully overwrite a partition as its output"))),(0,r.kt)("li",{parentName:"ul"},"Use dimension snapshots to handle slowly changing dimensions"),(0,r.kt)("li",{parentName:"ul"},"Use separate event time and processing time to handle late arriving facts")))}p.isMDXComponent=!0}}]);