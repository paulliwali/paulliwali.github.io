"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[18766],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),u=a,g=p["".concat(l,".").concat(u)]||p[u]||m[u]||o;return n?r.createElement(g,i(i({ref:t},d),{},{components:n})):r.createElement(g,i({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},16916:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={},i="Python Basics",s={unversionedId:"code/py-basic",id:"code/py-basic",title:"Python Basics",description:"Dictionary",source:"@site/docs/code/py-basic.md",sourceDirName:"code",slug:"/code/py-basic",permalink:"/docs/code/py-basic",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/code/py-basic.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"notes",permalink:"/docs/code/notes"},next:{title:"Python Data Science",permalink:"/docs/code/py-data-science"}},l={},c=[{value:"Dictionary",id:"dictionary",level:2},{value:"Time and Dates",id:"time-and-dates",level:2},{value:"Logging",id:"logging",level:2},{value:"Imports",id:"imports",level:2},{value:"Built-ins",id:"built-ins",level:2},{value:"Decorators",id:"decorators",level:2},{value:"Decorate functions without arguments",id:"decorate-functions-without-arguments",level:3},{value:"Decorate functions with arguments",id:"decorate-functions-with-arguments",level:3},{value:"Decorate class with a function",id:"decorate-class-with-a-function",level:3}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"python-basics"},"Python Basics"),(0,a.kt)("h2",{id:"dictionary"},"Dictionary"),(0,a.kt)("p",null,"Dictionary comprehension for filtering items in ",(0,a.kt)("inlineCode",{parentName:"p"},"some_dict")," that exists in ",(0,a.kt)("inlineCode",{parentName:"p"},"some_list")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"some_list = [1, 2, 3]\nnew_dict = {k: v for k, v in some_dict.itmes() if k in some_list}\n\n")),(0,a.kt)("p",null,"Nested dictionary comprehension"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"some_list = [1, 2, 3]\nnew_dict = {\n outer_k: {\n  inner_k: inner_v for inner_k, inner_v in outer_v.items() if inner_k in some_list\n } for outer_k, outer_v in some_dict.items() if outer_k in some_list\n}\n")),(0,a.kt)("h2",{id:"time-and-dates"},"Time and Dates"),(0,a.kt)("p",null,"Don't initialize timezone when creating datetime objects, localize the naive datetime. ",(0,a.kt)("a",{parentName:"p",href:"http://pytz.sourceforge.net/#localized-times-and-date-arithmetic"},"Source")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import pytz\nfrom datetime import datetime\n\npdt = pytz.timezone('America/Los_Angeles')\nbad_tz_aware_datetime = datetime(2014, 1, 1, tzinfo=pdt)\nnaive_datetime = datetime(2014, 1, 1)\ngood_tz_aware_datetime = pdt.localize(naive_datetime)\n")),(0,a.kt)("p",null,"pd.to_datetime(observation_df","['enter_epoch_ms']",", unit='ms', utc=True).dt.tz_convert(observation_df",'["timezone"]',")"),(0,a.kt)("h2",{id:"logging"},"Logging"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# Setup logger for scripts\nimport logging\n# Create a custom logger\nlogger = logging.getLogger(__name__)\n# Create handlers\nc_handler = logging.StreamHandler()\nf_handler = logging.FileHandler('file.log')\nc_handler.setLevel(logging.WARNING)\nf_handler.setLevel(logging.ERROR)\n# Create formatters and add it to handlers\nc_format = logging.Formatter('%(name)s - %(levelname)s - %(message)s')\nf_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nc_handler.setFormatter(c_format)\nf_handler.setFormatter(f_format)\n# Add handlers to the logger\nlogger.addHandler(c_handler)\nlogger.addHandler(f_handler)\nlogger.warning('This is a warning')\nlogger.error('This is an error')\n")),(0,a.kt)("p",null,"Computation of arguments passed to the logging method can be expensive, so they should be avoided if the logger will just throw the event away. Thus, using string formatting ",(0,a.kt)("inlineCode",{parentName:"p"},"%s")," over f-string formatting in logging messages is more optimal, since the arguments are deferred until it cannot be avoided."),(0,a.kt)("h2",{id:"imports"},"Imports"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# Import modules from root 'src' folder\nimport sys\nsrc_path = os.path.abspath(\"../../src\")\nif src_path not in sys.path:\n    sys.path.append(src_path)\n")),(0,a.kt)("h2",{id:"built-ins"},"Built-ins"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"yield")," - gets a generator object from the function. When Python calls a function with ",(0,a.kt)("inlineCode",{parentName:"p"},"yield")," it will execute code up to it and pauses to deliver the object, when it is called again it will resume from that statement until the next ",(0,a.kt)("inlineCode",{parentName:"p"},"yield")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"generators")," - a special kind of ",(0,a.kt)("inlineCode",{parentName:"p"},"iterator")," that you can only iterator over once and doesn't store values in memory"),(0,a.kt)("h2",{id:"decorators"},"Decorators"),(0,a.kt)("p",null,"Used in python as syntatic sugar for passing functions to functions and returning new functions."),(0,a.kt)("h3",{id:"decorate-functions-without-arguments"},"Decorate functions without arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from timeit import default_timer as timer\nfrom time import sleep\nfrom typing import Callable\n\ndef measure(func: Callable):\n def inner(*args, **kwargs):\n  print(f'---\x3e Calling {func.__name__}()')\n  start = timer()\n  func(*args, **kwargs)\n  elapsed_sec = timer() - start\n  print(f'---\x3e Done {func.__name__}(): {elapsed_sec:.3f} secs')\n return inner\n\ndef sleeper(seconds: int = 0):\n print('Going to sleep...')\n sleep(seconds)\n print('Done!')\n")),(0,a.kt)("p",null,"Instead of calling the ",(0,a.kt)("inlineCode",{parentName:"p"},"sleeper")," function within measure"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"measured_sleeper = measure(sleeper)\nmeasured_sleeper(3)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"---\x3e Calling sleeper()\nGoing to sleep...\nDone!\n---\x3e Done sleeper(): 3.003 secs\n")),(0,a.kt)("p",null,"We can use the decorator syntax to do this succinctly by wrapping the original function"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@measure\ndef sleeper(seconds: int = 0):\n print('Going to sleep...')\n sleep(seconds)\n print('Done!')\n\nsleeper(3)\n")),(0,a.kt)("h3",{id:"decorate-functions-with-arguments"},"Decorate functions with arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from typing import Callable\n\ndef repeat(n: int = 1):\n def decorator(func: Callable):\n  def inner(*args, **kwargs):\n   for _ in range(n):\n    func(*args, **kwargs)\n  return inner\n return decorator\n\n@repeat(n=3)\ndef hello(name: str):\n print(f'Hello {name}!')\n\nhello(\"world\")\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Hello world!\nHello world!\nHello world!\n")),(0,a.kt)("h3",{id:"decorate-class-with-a-function"},"Decorate class with a function"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from typing import Callable\n\ndef trace(cls: type):\n def make_traced(cls: type, method_name: str, method: Callable):\n  def traced_method(*args, **kwargs):\n   print(f'Executing {cls.__name__}::{method_name}...')\n   return method(*args, **kwargs)\n  return traced_method\n for name in cls.__dict__.keys():\n  if callable(getattr(cls, name)) and name != \"__class__\":\n   setattr(cls, name, make_traced(cls, name, getattr(cls, name)))\n return cls\n\n@trace\nclass Foo:\n i: int = 0\n def __init__(self, i: int = 0):\n  self.i = i\n def increment(self):\n  self.i += 1\n def __str__(self):\n  return f'This is a {self.__class__.__name__} object with i = {self.i}'\n")))}p.isMDXComponent=!0}}]);